{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "Il6S8qfepXTP",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Il6S8qfepXTP",
    "outputId": "4a9b8b82-49e3-443a-b38e-5893a75feee2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: openai==0.28 in /usr/local/lib/python3.11/dist-packages (0.28.0)\n",
      "Requirement already satisfied: shap in /usr/local/lib/python3.11/dist-packages (0.48.0)\n",
      "Requirement already satisfied: ipywidgets in /usr/local/lib/python3.11/dist-packages (7.7.1)\n",
      "Requirement already satisfied: requests>=2.20 in /usr/local/lib/python3.11/dist-packages (from openai==0.28) (2.32.3)\n",
      "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from openai==0.28) (4.67.1)\n",
      "Requirement already satisfied: aiohttp in /usr/local/lib/python3.11/dist-packages (from openai==0.28) (3.11.15)\n",
      "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from shap) (2.0.2)\n",
      "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from shap) (1.15.3)\n",
      "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (from shap) (1.6.1)\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from shap) (2.2.2)\n",
      "Requirement already satisfied: packaging>20.9 in /usr/local/lib/python3.11/dist-packages (from shap) (24.2)\n",
      "Requirement already satisfied: slicer==0.0.8 in /usr/local/lib/python3.11/dist-packages (from shap) (0.0.8)\n",
      "Requirement already satisfied: numba>=0.54 in /usr/local/lib/python3.11/dist-packages (from shap) (0.60.0)\n",
      "Requirement already satisfied: cloudpickle in /usr/local/lib/python3.11/dist-packages (from shap) (3.1.1)\n",
      "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from shap) (4.14.1)\n",
      "Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (6.17.1)\n",
      "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (0.2.0)\n",
      "Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (5.7.1)\n",
      "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (3.6.10)\n",
      "Requirement already satisfied: ipython>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (7.34.0)\n",
      "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (3.0.15)\n",
      "Requirement already satisfied: debugpy>=1.0 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (1.8.0)\n",
      "Requirement already satisfied: jupyter-client>=6.1.12 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (6.1.12)\n",
      "Requirement already satisfied: matplotlib-inline>=0.1 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (0.1.7)\n",
      "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (1.6.0)\n",
      "Requirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (5.9.5)\n",
      "Requirement already satisfied: pyzmq>=17 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (24.0.1)\n",
      "Requirement already satisfied: tornado>=6.1 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (6.4.2)\n",
      "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (75.2.0)\n",
      "Collecting jedi>=0.16 (from ipython>=4.0.0->ipywidgets)\n",
      "  Downloading jedi-0.19.2-py2.py3-none-any.whl.metadata (22 kB)\n",
      "Requirement already satisfied: decorator in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (4.4.2)\n",
      "Requirement already satisfied: pickleshare in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (0.7.5)\n",
      "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (3.0.51)\n",
      "Requirement already satisfied: pygments in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (2.19.2)\n",
      "Requirement already satisfied: backcall in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (0.2.0)\n",
      "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (4.9.0)\n",
      "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.54->shap) (0.43.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->openai==0.28) (3.4.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->openai==0.28) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->openai==0.28) (2.4.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->openai==0.28) (2025.7.9)\n",
      "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.11/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets) (6.5.7)\n",
      "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->openai==0.28) (2.6.1)\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp->openai==0.28) (1.4.0)\n",
      "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->openai==0.28) (25.3.0)\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp->openai==0.28) (1.7.0)\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp->openai==0.28) (6.6.3)\n",
      "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->openai==0.28) (0.3.2)\n",
      "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->openai==0.28) (1.20.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->shap) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->shap) (2025.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->shap) (2025.2)\n",
      "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->shap) (1.5.1)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->shap) (3.6.0)\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.11/dist-packages (from jedi>=0.16->ipython>=4.0.0->ipywidgets) (0.8.4)\n",
      "Requirement already satisfied: jupyter-core>=4.6.0 in /usr/local/lib/python3.11/dist-packages (from jupyter-client>=6.1.12->ipykernel>=4.5.1->ipywidgets) (5.8.1)\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.1.6)\n",
      "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (25.1.0)\n",
      "Requirement already satisfied: nbformat in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (5.10.4)\n",
      "Requirement already satisfied: nbconvert>=5 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (7.16.6)\n",
      "Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.8.3)\n",
      "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.18.1)\n",
      "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.22.1)\n",
      "Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.3.1)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.11/dist-packages (from pexpect>4.3->ipython>=4.0.0->ipywidgets) (0.7.0)\n",
      "Requirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=4.0.0->ipywidgets) (0.2.13)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->shap) (1.17.0)\n",
      "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.11/dist-packages (from jupyter-core>=4.6.0->jupyter-client>=6.1.12->ipykernel>=4.5.1->ipywidgets) (4.3.8)\n",
      "Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.11/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.2.4)\n",
      "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.13.4)\n",
      "Requirement already satisfied: bleach!=5.0.0 in /usr/local/lib/python3.11/dist-packages (from bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (6.2.0)\n",
      "Requirement already satisfied: defusedxml in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.7.1)\n",
      "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.3.0)\n",
      "Requirement already satisfied: markupsafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.0.2)\n",
      "Requirement already satisfied: mistune<4,>=2.0.3 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.1.3)\n",
      "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.10.2)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.5.1)\n",
      "Requirement already satisfied: fastjsonschema>=2.15 in /usr/local/lib/python3.11/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.21.1)\n",
      "Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.11/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.24.0)\n",
      "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.11/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (21.2.0)\n",
      "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from bleach!=5.0.0->bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.5.1)\n",
      "Requirement already satisfied: tinycss2<1.5,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.4.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2025.4.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.36.2)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.26.0)\n",
      "Requirement already satisfied: jupyter-server<3,>=1.8 in /usr/local/lib/python3.11/dist-packages (from notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.16.0)\n",
      "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.17.1)\n",
      "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.7)\n",
      "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.22)\n",
      "Requirement already satisfied: anyio>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.9.0)\n",
      "Requirement already satisfied: websocket-client in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.8.0)\n",
      "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.3.1)\n",
      "Downloading jedi-0.19.2-py2.py3-none-any.whl (1.6 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m42.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hInstalling collected packages: jedi\n",
      "Successfully installed jedi-0.19.2\n"
     ]
    }
   ],
   "source": [
    "!pip install openai==0.28 shap ipywidgets\n",
    "import openai\n",
    "import shap\n",
    "import ipywidgets as widgets\n",
    "from IPython.display import display\n",
    "\n",
    "openai.api_key = \"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\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "z25VgUC5v6wI",
   "metadata": {
    "id": "z25VgUC5v6wI"
   },
   "outputs": [],
   "source": [
    "import shap\n",
    "import openai\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "HqwraPvihd99",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 74
    },
    "id": "HqwraPvihd99",
    "outputId": "7398771c-cf9c-4304-b3fa-fdfefc086562"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "     <input type=\"file\" id=\"files-797ba9d5-a538-4694-800c-63caede21598\" name=\"files[]\" multiple disabled\n",
       "        style=\"border:none\" />\n",
       "     <output id=\"result-797ba9d5-a538-4694-800c-63caede21598\">\n",
       "      Upload widget is only available when the cell has been executed in the\n",
       "      current browser session. Please rerun this cell to enable.\n",
       "      </output>\n",
       "      <script>// Copyright 2017 Google LLC\n",
       "//\n",
       "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
       "// you may not use this file except in compliance with the License.\n",
       "// You may obtain a copy of the License at\n",
       "//\n",
       "//      http://www.apache.org/licenses/LICENSE-2.0\n",
       "//\n",
       "// Unless required by applicable law or agreed to in writing, software\n",
       "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
       "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
       "// See the License for the specific language governing permissions and\n",
       "// limitations under the License.\n",
       "\n",
       "/**\n",
       " * @fileoverview Helpers for google.colab Python module.\n",
       " */\n",
       "(function(scope) {\n",
       "function span(text, styleAttributes = {}) {\n",
       "  const element = document.createElement('span');\n",
       "  element.textContent = text;\n",
       "  for (const key of Object.keys(styleAttributes)) {\n",
       "    element.style[key] = styleAttributes[key];\n",
       "  }\n",
       "  return element;\n",
       "}\n",
       "\n",
       "// Max number of bytes which will be uploaded at a time.\n",
       "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
       "\n",
       "function _uploadFiles(inputId, outputId) {\n",
       "  const steps = uploadFilesStep(inputId, outputId);\n",
       "  const outputElement = document.getElementById(outputId);\n",
       "  // Cache steps on the outputElement to make it available for the next call\n",
       "  // to uploadFilesContinue from Python.\n",
       "  outputElement.steps = steps;\n",
       "\n",
       "  return _uploadFilesContinue(outputId);\n",
       "}\n",
       "\n",
       "// This is roughly an async generator (not supported in the browser yet),\n",
       "// where there are multiple asynchronous steps and the Python side is going\n",
       "// to poll for completion of each step.\n",
       "// This uses a Promise to block the python side on completion of each step,\n",
       "// then passes the result of the previous step as the input to the next step.\n",
       "function _uploadFilesContinue(outputId) {\n",
       "  const outputElement = document.getElementById(outputId);\n",
       "  const steps = outputElement.steps;\n",
       "\n",
       "  const next = steps.next(outputElement.lastPromiseValue);\n",
       "  return Promise.resolve(next.value.promise).then((value) => {\n",
       "    // Cache the last promise value to make it available to the next\n",
       "    // step of the generator.\n",
       "    outputElement.lastPromiseValue = value;\n",
       "    return next.value.response;\n",
       "  });\n",
       "}\n",
       "\n",
       "/**\n",
       " * Generator function which is called between each async step of the upload\n",
       " * process.\n",
       " * @param {string} inputId Element ID of the input file picker element.\n",
       " * @param {string} outputId Element ID of the output display.\n",
       " * @return {!Iterable<!Object>} Iterable of next steps.\n",
       " */\n",
       "function* uploadFilesStep(inputId, outputId) {\n",
       "  const inputElement = document.getElementById(inputId);\n",
       "  inputElement.disabled = false;\n",
       "\n",
       "  const outputElement = document.getElementById(outputId);\n",
       "  outputElement.innerHTML = '';\n",
       "\n",
       "  const pickedPromise = new Promise((resolve) => {\n",
       "    inputElement.addEventListener('change', (e) => {\n",
       "      resolve(e.target.files);\n",
       "    });\n",
       "  });\n",
       "\n",
       "  const cancel = document.createElement('button');\n",
       "  inputElement.parentElement.appendChild(cancel);\n",
       "  cancel.textContent = 'Cancel upload';\n",
       "  const cancelPromise = new Promise((resolve) => {\n",
       "    cancel.onclick = () => {\n",
       "      resolve(null);\n",
       "    };\n",
       "  });\n",
       "\n",
       "  // Wait for the user to pick the files.\n",
       "  const files = yield {\n",
       "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
       "    response: {\n",
       "      action: 'starting',\n",
       "    }\n",
       "  };\n",
       "\n",
       "  cancel.remove();\n",
       "\n",
       "  // Disable the input element since further picks are not allowed.\n",
       "  inputElement.disabled = true;\n",
       "\n",
       "  if (!files) {\n",
       "    return {\n",
       "      response: {\n",
       "        action: 'complete',\n",
       "      }\n",
       "    };\n",
       "  }\n",
       "\n",
       "  for (const file of files) {\n",
       "    const li = document.createElement('li');\n",
       "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
       "    li.append(span(\n",
       "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
       "        `last modified: ${\n",
       "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
       "                                    'n/a'} - `));\n",
       "    const percent = span('0% done');\n",
       "    li.appendChild(percent);\n",
       "\n",
       "    outputElement.appendChild(li);\n",
       "\n",
       "    const fileDataPromise = new Promise((resolve) => {\n",
       "      const reader = new FileReader();\n",
       "      reader.onload = (e) => {\n",
       "        resolve(e.target.result);\n",
       "      };\n",
       "      reader.readAsArrayBuffer(file);\n",
       "    });\n",
       "    // Wait for the data to be ready.\n",
       "    let fileData = yield {\n",
       "      promise: fileDataPromise,\n",
       "      response: {\n",
       "        action: 'continue',\n",
       "      }\n",
       "    };\n",
       "\n",
       "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
       "    let position = 0;\n",
       "    do {\n",
       "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
       "      const chunk = new Uint8Array(fileData, position, length);\n",
       "      position += length;\n",
       "\n",
       "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
       "      yield {\n",
       "        response: {\n",
       "          action: 'append',\n",
       "          file: file.name,\n",
       "          data: base64,\n",
       "        },\n",
       "      };\n",
       "\n",
       "      let percentDone = fileData.byteLength === 0 ?\n",
       "          100 :\n",
       "          Math.round((position / fileData.byteLength) * 100);\n",
       "      percent.textContent = `${percentDone}% done`;\n",
       "\n",
       "    } while (position < fileData.byteLength);\n",
       "  }\n",
       "\n",
       "  // All done.\n",
       "  yield {\n",
       "    response: {\n",
       "      action: 'complete',\n",
       "    }\n",
       "  };\n",
       "}\n",
       "\n",
       "scope.google = scope.google || {};\n",
       "scope.google.colab = scope.google.colab || {};\n",
       "scope.google.colab._files = {\n",
       "  _uploadFiles,\n",
       "  _uploadFilesContinue,\n",
       "};\n",
       "})(self);\n",
       "</script> "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving icd9.txt to icd9 (1).txt\n"
     ]
    }
   ],
   "source": [
    "from google.colab import files\n",
    "uploaded = files.upload()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "CJqc-awCazFv",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "CJqc-awCazFv",
    "outputId": "ab03dbbe-3c5c-4908-ff90-80268d00246b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Working directory set to: /content/medicare-fraud-detection-ds606\n"
     ]
    }
   ],
   "source": [
    "# Set working directory for Google Colab\n",
    "import os\n",
    "\n",
    "base_path = \"/content/medicare-fraud-detection-ds606\"\n",
    "os.chdir(base_path)\n",
    "print(\"Working directory set to:\", os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "iU-ZcDITZibe",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "iU-ZcDITZibe",
    "outputId": "8d68fc4e-efbf-49a7-c786-43c6b6cb02a4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fatal: destination path 'medicare-fraud-detection-ds606' already exists and is not an empty directory.\n"
     ]
    }
   ],
   "source": [
    "# Clone your private repo using GitHub token\n",
    "!git clone https://boaboa11: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@github.com/shebeta/medicare-fraud-detection-ds606.git"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "SQkhY8Soal8A",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "SQkhY8Soal8A",
    "outputId": "c1e2f414-0e7f-4911-a48f-e74b96241fe4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train shape: (5410, 2)\n",
      "Train Beneficiary shape: (138556, 25)\n",
      "Train Inpatient shape: (40474, 30)\n",
      "Train Outpatient shape: (517737, 27)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Define base path\n",
    "base_path = \"/content/medicare-fraud-detection-ds606\"\n",
    "\n",
    "# Load training datasets\n",
    "train = pd.read_csv(f\"{base_path}/Train-1542865627584.csv\")\n",
    "train_beneficiary = pd.read_csv(f\"{base_path}/Train_Beneficiarydata-1542865627584.csv\")\n",
    "train_inpatient = pd.read_csv(f\"{base_path}/Train_Inpatientdata-1542865627584.csv\")\n",
    "train_outpatient = pd.read_csv(f\"{base_path}/Train_Outpatientdata-1542865627584.csv\")\n",
    "\n",
    "# Load test datasets\n",
    "test = pd.read_csv(f\"{base_path}/Test-1542969243754.csv\")\n",
    "test_beneficiary = pd.read_csv(f\"{base_path}/Test_Beneficiarydata-1542969243754.csv\")\n",
    "test_inpatient = pd.read_csv(f\"{base_path}/Test_Inpatientdata-1542969243754.csv\")\n",
    "test_outpatient = pd.read_csv(f\"{base_path}/Test_Outpatientdata-1542969243754.csv\")\n",
    "\n",
    "# Confirm success\n",
    "print(\"Train shape:\", train.shape)\n",
    "print(\"Train Beneficiary shape:\", train_beneficiary.shape)\n",
    "print(\"Train Inpatient shape:\", train_inpatient.shape)\n",
    "print(\"Train Outpatient shape:\", train_outpatient.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "YlTYt_QmcxLW",
   "metadata": {
    "id": "YlTYt_QmcxLW"
   },
   "source": [
    "Create train_full"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5Ah5hyrEcxcD",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 273
    },
    "id": "5Ah5hyrEcxcD",
    "outputId": "97b5763a-9284-4091-b9fc-2c93b85948d8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_full shape: (558211, 56)\n"
     ]
    },
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "dataframe",
       "variable_name": "train_full"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-a9a013c1-1190-4cbc-b605-32e4bdf91b61\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BeneID</th>\n",
       "      <th>ClaimID</th>\n",
       "      <th>ClaimStartDt</th>\n",
       "      <th>ClaimEndDt</th>\n",
       "      <th>Provider</th>\n",
       "      <th>InscClaimAmtReimbursed</th>\n",
       "      <th>AttendingPhysician</th>\n",
       "      <th>OperatingPhysician</th>\n",
       "      <th>OtherPhysician</th>\n",
       "      <th>AdmissionDt</th>\n",
       "      <th>...</th>\n",
       "      <th>ChronicCond_Diabetes</th>\n",
       "      <th>ChronicCond_IschemicHeart</th>\n",
       "      <th>ChronicCond_Osteoporasis</th>\n",
       "      <th>ChronicCond_rheumatoidarthritis</th>\n",
       "      <th>ChronicCond_stroke</th>\n",
       "      <th>IPAnnualReimbursementAmt</th>\n",
       "      <th>IPAnnualDeductibleAmt</th>\n",
       "      <th>OPAnnualReimbursementAmt</th>\n",
       "      <th>OPAnnualDeductibleAmt</th>\n",
       "      <th>PotentialFraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BENE11001</td>\n",
       "      <td>CLM46614</td>\n",
       "      <td>2009-04-12</td>\n",
       "      <td>2009-04-18</td>\n",
       "      <td>PRV55912</td>\n",
       "      <td>26000</td>\n",
       "      <td>PHY390922</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2009-04-12</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>36000</td>\n",
       "      <td>3204</td>\n",
       "      <td>60</td>\n",
       "      <td>70</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BENE11001</td>\n",
       "      <td>CLM66048</td>\n",
       "      <td>2009-08-31</td>\n",
       "      <td>2009-09-02</td>\n",
       "      <td>PRV55907</td>\n",
       "      <td>5000</td>\n",
       "      <td>PHY318495</td>\n",
       "      <td>PHY318495</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2009-08-31</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>36000</td>\n",
       "      <td>3204</td>\n",
       "      <td>60</td>\n",
       "      <td>70</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BENE11001</td>\n",
       "      <td>CLM68358</td>\n",
       "      <td>2009-09-17</td>\n",
       "      <td>2009-09-20</td>\n",
       "      <td>PRV56046</td>\n",
       "      <td>5000</td>\n",
       "      <td>PHY372395</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PHY324689</td>\n",
       "      <td>2009-09-17</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>36000</td>\n",
       "      <td>3204</td>\n",
       "      <td>60</td>\n",
       "      <td>70</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BENE11011</td>\n",
       "      <td>CLM38412</td>\n",
       "      <td>2009-02-14</td>\n",
       "      <td>2009-02-22</td>\n",
       "      <td>PRV52405</td>\n",
       "      <td>5000</td>\n",
       "      <td>PHY369659</td>\n",
       "      <td>PHY392961</td>\n",
       "      <td>PHY349768</td>\n",
       "      <td>2009-02-14</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5000</td>\n",
       "      <td>1068</td>\n",
       "      <td>250</td>\n",
       "      <td>320</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BENE11014</td>\n",
       "      <td>CLM63689</td>\n",
       "      <td>2009-08-13</td>\n",
       "      <td>2009-08-30</td>\n",
       "      <td>PRV56614</td>\n",
       "      <td>10000</td>\n",
       "      <td>PHY379376</td>\n",
       "      <td>PHY398258</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2009-08-13</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>21260</td>\n",
       "      <td>2136</td>\n",
       "      <td>120</td>\n",
       "      <td>100</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 56 columns</p>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9a013c1-1190-4cbc-b605-32e4bdf91b61')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-a9a013c1-1190-4cbc-b605-32e4bdf91b61 button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-a9a013c1-1190-4cbc-b605-32e4bdf91b61');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-17207057-507d-4d44-9c41-766708f18990\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-17207057-507d-4d44-9c41-766708f18990')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-17207057-507d-4d44-9c41-766708f18990 button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "      BeneID   ClaimID ClaimStartDt  ClaimEndDt  Provider  \\\n",
       "0  BENE11001  CLM46614   2009-04-12  2009-04-18  PRV55912   \n",
       "1  BENE11001  CLM66048   2009-08-31  2009-09-02  PRV55907   \n",
       "2  BENE11001  CLM68358   2009-09-17  2009-09-20  PRV56046   \n",
       "3  BENE11011  CLM38412   2009-02-14  2009-02-22  PRV52405   \n",
       "4  BENE11014  CLM63689   2009-08-13  2009-08-30  PRV56614   \n",
       "\n",
       "   InscClaimAmtReimbursed AttendingPhysician OperatingPhysician  \\\n",
       "0                   26000          PHY390922                NaN   \n",
       "1                    5000          PHY318495          PHY318495   \n",
       "2                    5000          PHY372395                NaN   \n",
       "3                    5000          PHY369659          PHY392961   \n",
       "4                   10000          PHY379376          PHY398258   \n",
       "\n",
       "  OtherPhysician AdmissionDt  ... ChronicCond_Diabetes  \\\n",
       "0            NaN  2009-04-12  ...                    1   \n",
       "1            NaN  2009-08-31  ...                    1   \n",
       "2      PHY324689  2009-09-17  ...                    1   \n",
       "3      PHY349768  2009-02-14  ...                    1   \n",
       "4            NaN  2009-08-13  ...                    2   \n",
       "\n",
       "   ChronicCond_IschemicHeart ChronicCond_Osteoporasis  \\\n",
       "0                          1                        2   \n",
       "1                          1                        2   \n",
       "2                          1                        2   \n",
       "3                          2                        2   \n",
       "4                          1                        2   \n",
       "\n",
       "  ChronicCond_rheumatoidarthritis ChronicCond_stroke IPAnnualReimbursementAmt  \\\n",
       "0                               1                  1                    36000   \n",
       "1                               1                  1                    36000   \n",
       "2                               1                  1                    36000   \n",
       "3                               1                  1                     5000   \n",
       "4                               2                  2                    21260   \n",
       "\n",
       "  IPAnnualDeductibleAmt OPAnnualReimbursementAmt OPAnnualDeductibleAmt  \\\n",
       "0                  3204                       60                    70   \n",
       "1                  3204                       60                    70   \n",
       "2                  3204                       60                    70   \n",
       "3                  1068                      250                   320   \n",
       "4                  2136                      120                   100   \n",
       "\n",
       "  PotentialFraud  \n",
       "0            Yes  \n",
       "1             No  \n",
       "2             No  \n",
       "3             No  \n",
       "4             No  \n",
       "\n",
       "[5 rows x 56 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load Training Data\n",
    "train = pd.read_csv(\"/content/medicare-fraud-detection-ds606/Train-1542865627584.csv\")\n",
    "train_beneficiary = pd.read_csv(\"/content/medicare-fraud-detection-ds606/Train_Beneficiarydata-1542865627584.csv\")\n",
    "train_inpatient = pd.read_csv(\"/content/medicare-fraud-detection-ds606/Train_Inpatientdata-1542865627584.csv\")\n",
    "train_outpatient = pd.read_csv(\"/content/medicare-fraud-detection-ds606/Train_Outpatientdata-1542865627584.csv\")\n",
    "\n",
    "# Add source column\n",
    "train_inpatient[\"Source\"] = \"Inpatient\"\n",
    "train_outpatient[\"Source\"] = \"Outpatient\"\n",
    "\n",
    "# Combine claims\n",
    "claims = pd.concat([train_inpatient, train_outpatient], ignore_index=True)\n",
    "\n",
    "# Merge with beneficiary data\n",
    "claims = claims.merge(train_beneficiary, on=\"BeneID\", how=\"left\")\n",
    "\n",
    "# Merge with labels\n",
    "train_full = claims.merge(train, on=\"Provider\", how=\"left\")\n",
    "\n",
    "# Confirm merge\n",
    "print(\"train_full shape:\", train_full.shape)\n",
    "train_full.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "lU19WwLY5GgR",
   "metadata": {
    "id": "lU19WwLY5GgR"
   },
   "outputs": [],
   "source": [
    "# Preserve original full dataset before column drops\n",
    "train_full = train_full.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "KXLg-pVRcidy",
   "metadata": {
    "id": "KXLg-pVRcidy"
   },
   "source": [
    "Step 1: Visualize Fraud Class Imbalance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "B2TTkUQqcl2e",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 603
    },
    "id": "B2TTkUQqcl2e",
    "outputId": "75736ce0-42e9-43ba-f852-1702eaa44411"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fraud Class Counts:\n",
      "PotentialFraud\n",
      "No     345415\n",
      "Yes    212796\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Fraud Class Percentage:\n",
      "PotentialFraud\n",
      "No     61.88\n",
      "Yes    38.12\n",
      "Name: proportion, dtype: float64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Check class distribution\n",
    "fraud_counts = train_full['PotentialFraud'].value_counts()\n",
    "fraud_percent = train_full['PotentialFraud'].value_counts(normalize=True) * 100\n",
    "\n",
    "# Print raw counts and percentages\n",
    "print(\"Fraud Class Counts:\")\n",
    "print(fraud_counts)\n",
    "print(\"\\nFraud Class Percentage:\")\n",
    "print(fraud_percent.round(2))\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(6, 4))\n",
    "fraud_counts.plot(kind='bar', color=['skyblue', 'salmon'])\n",
    "plt.title(\"Fraud Class Distribution\")\n",
    "plt.ylabel(\"Number of Providers\")\n",
    "plt.xlabel(\"Potential Fraud\")\n",
    "plt.xticks(rotation=0)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9u-uTGlqdCMv",
   "metadata": {
    "id": "9u-uTGlqdCMv"
   },
   "source": [
    "Step 2: Reimbursement Amounts per Claim and Provider"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ojAG0UZMdChO",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 507
    },
    "id": "ojAG0UZMdChO",
    "outputId": "98ec7158-2009-42a4-9c12-e2b24b68c5bc"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "# Avoid log(0) by adding 1\n",
    "train_full[\"LogReimbursed\"] = np.log1p(train_full[\"InscClaimAmtReimbursed\"])\n",
    "\n",
    "plt.figure(figsize=(10, 5))\n",
    "sns.histplot(\n",
    "    data=train_full,\n",
    "    x=\"LogReimbursed\",\n",
    "    bins=100,\n",
    "    kde=True,\n",
    "    color=\"darkcyan\"\n",
    ")\n",
    "plt.title(\"Log-Transformed Distribution of Claim Reimbursement Amounts\")\n",
    "plt.xlabel(\"Reimbursed Amount\")\n",
    "plt.ylabel(\"Number of Claims\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "VygPH2Fgdxh-",
   "metadata": {
    "id": "VygPH2Fgdxh-"
   },
   "source": [
    "Step 3 claim frequency per provider"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "NQoEe4QEd1zA",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 696
    },
    "id": "NQoEe4QEd1zA",
    "outputId": "8459b08f-5fe5-407b-9bcb-8129401c29d5"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipython-input-9-1103628630.py:10: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.barplot(data=top_claims, x='Provider', y='ClaimCount', palette='mako')\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Count number of claims per provider\n",
    "claim_counts = train_full['Provider'].value_counts().reset_index()\n",
    "claim_counts.columns = ['Provider', 'ClaimCount']\n",
    "\n",
    "# Top 15 providers by claim count\n",
    "top_claims = claim_counts.head(15)\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(data=top_claims, x='Provider', y='ClaimCount', palette='mako')\n",
    "plt.title('Top 15 Providers by Number of Claims')\n",
    "plt.xticks(rotation=45)\n",
    "plt.ylabel('Number of Claims')\n",
    "plt.xlabel('Provider ID')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "LuSnShgIebEM",
   "metadata": {
    "id": "LuSnShgIebEM"
   },
   "source": [
    "Step 4: Top 10 Most Frequent Diagnosis Codes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "msvFC05BfXQf",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 363
    },
    "id": "msvFC05BfXQf",
    "outputId": "65b9d985-e5d0-41f2-c87c-63fcc6318e5b"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"icd9_mapping\",\n  \"rows\": 14567,\n  \"fields\": [\n    {\n      \"column\": \"Code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14567,\n        \"samples\": [\n          \"01185\",\n          \"38010\",\n          \"27402\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LongDescription\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14560,\n        \"samples\": [\n          \"Early onset of delivery, delivered, with or without mention of antepartum condition\",\n          \"Other specified polyglandular dysfunction\",\n          \"Hemiplegic migraine, with intractable migraine, so stated, with status migrainosus\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ShortDescription\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14328,\n        \"samples\": [\n          \"Mal neo post hypopharynx\",\n          \"Human herpesvirus 7 infc\",\n          \"Perforation gallbladder\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe",
       "variable_name": "icd9_mapping"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-bf980ad8-e1d8-4a7d-aa99-7085338683ea\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code</th>\n",
       "      <th>LongDescription</th>\n",
       "      <th>ShortDescription</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0010</td>\n",
       "      <td>Cholera due to vibrio cholerae</td>\n",
       "      <td>Cholera d/t vib cholerae</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0011</td>\n",
       "      <td>Cholera due to vibrio cholerae el tor</td>\n",
       "      <td>Cholera d/t vib el tor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0019</td>\n",
       "      <td>Cholera, unspecified</td>\n",
       "      <td>Cholera NOS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0020</td>\n",
       "      <td>Typhoid fever</td>\n",
       "      <td>Typhoid fever</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0021</td>\n",
       "      <td>Paratyphoid fever A</td>\n",
       "      <td>Paratyphoid fever a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0022</td>\n",
       "      <td>Paratyphoid fever B</td>\n",
       "      <td>Paratyphoid fever b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0023</td>\n",
       "      <td>Paratyphoid fever C</td>\n",
       "      <td>Paratyphoid fever c</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0029</td>\n",
       "      <td>Paratyphoid fever, unspecified</td>\n",
       "      <td>Paratyphoid fever NOS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0030</td>\n",
       "      <td>Salmonella gastroenteritis</td>\n",
       "      <td>Salmonella enteritis</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0031</td>\n",
       "      <td>Salmonella septicemia</td>\n",
       "      <td>Salmonella septicemia</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bf980ad8-e1d8-4a7d-aa99-7085338683ea')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-bf980ad8-e1d8-4a7d-aa99-7085338683ea button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-bf980ad8-e1d8-4a7d-aa99-7085338683ea');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-743b2edb-993c-440c-ba72-c3dcaaa67cb8\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-743b2edb-993c-440c-ba72-c3dcaaa67cb8')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-743b2edb-993c-440c-ba72-c3dcaaa67cb8 button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "   Code                        LongDescription          ShortDescription\n",
       "0  0010         Cholera due to vibrio cholerae  Cholera d/t vib cholerae\n",
       "1  0011  Cholera due to vibrio cholerae el tor    Cholera d/t vib el tor\n",
       "2  0019                   Cholera, unspecified               Cholera NOS\n",
       "3  0020                          Typhoid fever             Typhoid fever\n",
       "4  0021                    Paratyphoid fever A       Paratyphoid fever a\n",
       "5  0022                    Paratyphoid fever B       Paratyphoid fever b\n",
       "6  0023                    Paratyphoid fever C       Paratyphoid fever c\n",
       "7  0029         Paratyphoid fever, unspecified     Paratyphoid fever NOS\n",
       "8  0030             Salmonella gastroenteritis      Salmonella enteritis\n",
       "9  0031                  Salmonella septicemia     Salmonella septicemia"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load ICD-9 mapping file using the correct delimiter and encoding\n",
    "icd9_mapping = pd.read_csv(\"icd9.txt\", delimiter='\\t', encoding='ISO-8859-1')\n",
    "# Drop the unnecessary 4th column\n",
    "icd9_mapping = icd9_mapping.iloc[:, :3]\n",
    "\n",
    "# Rename columns\n",
    "icd9_mapping.columns = [\"Code\", \"LongDescription\", \"ShortDescription\"]\n",
    "\n",
    "# Clean ICD-9 codes (remove decimal if any, trim whitespace)\n",
    "icd9_mapping[\"Code\"] = icd9_mapping[\"Code\"].str.strip().str.replace(\".\", \"\", regex=False)\n",
    "\n",
    "# Preview result\n",
    "icd9_mapping.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0NFsAXT0ix1u",
   "metadata": {
    "id": "0NFsAXT0ix1u"
   },
   "source": [
    "Merge Top Diagnosis Codes with Descriptions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "RkAzUkA3i0yB",
   "metadata": {
    "id": "RkAzUkA3i0yB"
   },
   "outputs": [],
   "source": [
    "# Identify diagnosis code columns\n",
    "diag_cols = [col for col in train_full.columns if col.startswith(\"ClmDiagnosisCode\")]\n",
    "\n",
    "# Melt into long format for easier mapping\n",
    "diagnosis_long = train_full[diag_cols].copy()\n",
    "diagnosis_long[\"RowID\"] = diagnosis_long.index  # to keep track of rows\n",
    "diagnosis_long = diagnosis_long.melt(id_vars=\"RowID\", value_name=\"DiagCode\").dropna()\n",
    "\n",
    "# Merge with ICD-9 mapping\n",
    "diagnosis_long = diagnosis_long.merge(icd9_mapping, left_on=\"DiagCode\", right_on=\"Code\", how=\"left\")\n",
    "\n",
    "# Optional: Fill missing descriptions with raw codes\n",
    "diagnosis_long[\"Label\"] = diagnosis_long[\"ShortDescription\"].fillna(diagnosis_long[\"DiagCode\"])\n",
    "\n",
    "# Pivot back to wide format with descriptions\n",
    "diagnosis_named = diagnosis_long.pivot(index=\"RowID\", columns=\"variable\", values=\"Label\")\n",
    "\n",
    "# Rename columns to distinguish them\n",
    "diagnosis_named.columns = [col + \"_Named\" for col in diagnosis_named.columns]\n",
    "\n",
    "# Join back to train_full\n",
    "train_full = train_full.join(diagnosis_named)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "KgDvcGDhgJNG",
   "metadata": {
    "id": "KgDvcGDhgJNG"
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Identify diagnosis code columns\n",
    "diag_cols = ['ClmDiagnosisCode_1', 'ClmDiagnosisCode_2', 'ClmDiagnosisCode_3',\n",
    "             'ClmDiagnosisCode_4', 'ClmDiagnosisCode_5', 'ClmDiagnosisCode_6',\n",
    "             'ClmDiagnosisCode_7', 'ClmDiagnosisCode_8', 'ClmDiagnosisCode_9',\n",
    "             'ClmDiagnosisCode_10']\n",
    "\n",
    "# Stack all codes into one long Series\n",
    "all_diags = train_full[diag_cols].stack().dropna().astype(str)\n",
    "\n",
    "# Count top 10 diagnosis codes\n",
    "top_diags = all_diags.value_counts().head(10).reset_index()\n",
    "top_diags.columns = ['DiagnosisCode', 'Count']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "eigXw5kQee3q",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 696
    },
    "id": "eigXw5kQee3q",
    "outputId": "1aa206ec-443b-4a0d-8e1b-c322e7177c5c"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipython-input-13-382663291.py:9: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.barplot(data=top_diags, x='Label', y='Count', palette='viridis')\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Merge with ICD-9 descriptions\n",
    "top_diags = top_diags.merge(icd9_mapping, left_on='DiagnosisCode', right_on='Code', how='left')\n",
    "\n",
    "# Use short descriptions if available; fallback to code\n",
    "top_diags['Label'] = top_diags['ShortDescription'].fillna(top_diags['DiagnosisCode'])\n",
    "\n",
    "# Plot with descriptions\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.barplot(data=top_diags, x='Label', y='Count', palette='viridis')\n",
    "plt.title('Top 10 Most Frequent Diagnosis Codes (Described)')\n",
    "plt.xlabel('Diagnosis')\n",
    "plt.ylabel('Number of Claims')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "l1fz99QEjfRj",
   "metadata": {
    "id": "l1fz99QEjfRj"
   },
   "source": [
    "Chronic Condition Averages by Fraud Label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "gq7BE_W5egmc",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 607
    },
    "id": "gq7BE_W5egmc",
    "outputId": "128b2a78-3f4c-4eb9-bfaa-73186996e3b3"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# List chronic condition columns\n",
    "chronic_cols = [col for col in train_full.columns if col.startswith(\"ChronicCond_\")]\n",
    "# Convert 1/2 flags to binary: 1 → 1, 2 → 0\n",
    "binary_chronic = train_full[chronic_cols].replace({1: 1, 2: 0})\n",
    "\n",
    "# Add fraud flag back\n",
    "binary_chronic['PotentialFraud'] = train_full['PotentialFraud']\n",
    "\n",
    "# Group by fraud status and calculate % with condition (mean of binary 1s)\n",
    "chronic_percent = binary_chronic.groupby('PotentialFraud').mean().T * 100\n",
    "chronic_percent = chronic_percent.reset_index().melt(id_vars='index', var_name='Fraud', value_name='Percent')\n",
    "chronic_percent.rename(columns={'index': 'Condition'}, inplace=True)\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(12,6))\n",
    "sns.barplot(data=chronic_percent, x='Condition', y='Percent', hue='Fraud')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "plt.title('% of Patients with Chronic Conditions by Fraud Status')\n",
    "plt.ylabel('Percentage with Condition (%)')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "Q2br3fUklIFP",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Q2br3fUklIFP",
    "outputId": "d39d676d-ab8c-4688-95a1-6053626a33e4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['ChronicCond_Alzheimer',\n",
       " 'ChronicCond_Heartfailure',\n",
       " 'ChronicCond_KidneyDisease',\n",
       " 'ChronicCond_Cancer',\n",
       " 'ChronicCond_ObstrPulmonary',\n",
       " 'ChronicCond_Depression',\n",
       " 'ChronicCond_Diabetes',\n",
       " 'ChronicCond_IschemicHeart',\n",
       " 'ChronicCond_Osteoporasis',\n",
       " 'ChronicCond_rheumatoidarthritis',\n",
       " 'ChronicCond_stroke']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show all columns in train_full that start with \"ChronicCond_\"\n",
    "[ch for ch in train_full.columns if \"ChronicCond_\" in ch]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "tFImj23R7bP0",
   "metadata": {
    "id": "tFImj23R7bP0"
   },
   "source": [
    "% of Patients WITH Chronic Condition Seen by Fraud vs. Non-Fraud Providers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "YlDKQeSL8FxH",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 394
    },
    "id": "YlDKQeSL8FxH",
    "outputId": "3ce8565d-4f1e-44c5-abe9-a6edbfbee9d3"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"cond_stats_df\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"Condition\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Depression\",\n          \"Alzheimer\",\n          \"rheumatoidarthritis\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total Patients with Condition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116036,\n        \"min\": 56781,\n        \"max\": 423830,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          242714,\n          224327,\n          173699\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraud Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44335,\n        \"min\": 22396,\n        \"max\": 162512,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          92588,\n          86347,\n          66843\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No Fraud Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71707,\n        \"min\": 34385,\n        \"max\": 261318,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          150126,\n          137980,\n          106856\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"% Fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.40460980080701286,\n        \"min\": 38.15,\n        \"max\": 39.44,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          38.48,\n          39.07,\n          38.29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"% No Fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.40460980080701286,\n        \"min\": 60.56,\n        \"max\": 61.85,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          61.52,\n          60.93,\n          61.71\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe",
       "variable_name": "cond_stats_df"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-8e4a9c1d-be57-4020-a2ae-2b395bcb2aea\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Condition</th>\n",
       "      <th>Total Patients with Condition</th>\n",
       "      <th>Fraud Count</th>\n",
       "      <th>No Fraud Count</th>\n",
       "      <th>% Fraud</th>\n",
       "      <th>% No Fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alzheimer</td>\n",
       "      <td>224327</td>\n",
       "      <td>86347</td>\n",
       "      <td>137980</td>\n",
       "      <td>38.49</td>\n",
       "      <td>61.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Heartfailure</td>\n",
       "      <td>329583</td>\n",
       "      <td>126846</td>\n",
       "      <td>202737</td>\n",
       "      <td>38.49</td>\n",
       "      <td>61.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>KidneyDisease</td>\n",
       "      <td>229984</td>\n",
       "      <td>89847</td>\n",
       "      <td>140137</td>\n",
       "      <td>39.07</td>\n",
       "      <td>60.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Cancer</td>\n",
       "      <td>84505</td>\n",
       "      <td>32578</td>\n",
       "      <td>51927</td>\n",
       "      <td>38.55</td>\n",
       "      <td>61.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ObstrPulmonary</td>\n",
       "      <td>174681</td>\n",
       "      <td>68108</td>\n",
       "      <td>106573</td>\n",
       "      <td>38.99</td>\n",
       "      <td>61.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Depression</td>\n",
       "      <td>242714</td>\n",
       "      <td>92588</td>\n",
       "      <td>150126</td>\n",
       "      <td>38.15</td>\n",
       "      <td>61.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Diabetes</td>\n",
       "      <td>393759</td>\n",
       "      <td>150765</td>\n",
       "      <td>242994</td>\n",
       "      <td>38.29</td>\n",
       "      <td>61.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>IschemicHeart</td>\n",
       "      <td>423830</td>\n",
       "      <td>162512</td>\n",
       "      <td>261318</td>\n",
       "      <td>38.34</td>\n",
       "      <td>61.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Osteoporasis</td>\n",
       "      <td>177314</td>\n",
       "      <td>67743</td>\n",
       "      <td>109571</td>\n",
       "      <td>38.21</td>\n",
       "      <td>61.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>rheumatoidarthritis</td>\n",
       "      <td>173699</td>\n",
       "      <td>66843</td>\n",
       "      <td>106856</td>\n",
       "      <td>38.48</td>\n",
       "      <td>61.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>stroke</td>\n",
       "      <td>56781</td>\n",
       "      <td>22396</td>\n",
       "      <td>34385</td>\n",
       "      <td>39.44</td>\n",
       "      <td>60.56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e4a9c1d-be57-4020-a2ae-2b395bcb2aea')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-8e4a9c1d-be57-4020-a2ae-2b395bcb2aea button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-8e4a9c1d-be57-4020-a2ae-2b395bcb2aea');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-d10dc190-d779-4698-a04b-48aeecceb4d6\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d10dc190-d779-4698-a04b-48aeecceb4d6')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-d10dc190-d779-4698-a04b-48aeecceb4d6 button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "  <div id=\"id_7a62e969-c8b9-4c4c-8a58-7ca23af82807\">\n",
       "    <style>\n",
       "      .colab-df-generate {\n",
       "        background-color: #E8F0FE;\n",
       "        border: none;\n",
       "        border-radius: 50%;\n",
       "        cursor: pointer;\n",
       "        display: none;\n",
       "        fill: #1967D2;\n",
       "        height: 32px;\n",
       "        padding: 0 0 0 0;\n",
       "        width: 32px;\n",
       "      }\n",
       "\n",
       "      .colab-df-generate:hover {\n",
       "        background-color: #E2EBFA;\n",
       "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "        fill: #174EA6;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate {\n",
       "        background-color: #3B4455;\n",
       "        fill: #D2E3FC;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate:hover {\n",
       "        background-color: #434B5C;\n",
       "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "        fill: #FFFFFF;\n",
       "      }\n",
       "    </style>\n",
       "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cond_stats_df')\"\n",
       "            title=\"Generate code using this dataframe.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "    <script>\n",
       "      (() => {\n",
       "      const buttonEl =\n",
       "        document.querySelector('#id_7a62e969-c8b9-4c4c-8a58-7ca23af82807 button.colab-df-generate');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      buttonEl.onclick = () => {\n",
       "        google.colab.notebook.generateWithVariable('cond_stats_df');\n",
       "      }\n",
       "      })();\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "              Condition  Total Patients with Condition  Fraud Count  \\\n",
       "0             Alzheimer                         224327        86347   \n",
       "1          Heartfailure                         329583       126846   \n",
       "2         KidneyDisease                         229984        89847   \n",
       "3                Cancer                          84505        32578   \n",
       "4        ObstrPulmonary                         174681        68108   \n",
       "5            Depression                         242714        92588   \n",
       "6              Diabetes                         393759       150765   \n",
       "7         IschemicHeart                         423830       162512   \n",
       "8          Osteoporasis                         177314        67743   \n",
       "9   rheumatoidarthritis                         173699        66843   \n",
       "10               stroke                          56781        22396   \n",
       "\n",
       "    No Fraud Count  % Fraud  % No Fraud  \n",
       "0           137980    38.49       61.51  \n",
       "1           202737    38.49       61.51  \n",
       "2           140137    39.07       60.93  \n",
       "3            51927    38.55       61.45  \n",
       "4           106573    38.99       61.01  \n",
       "5           150126    38.15       61.85  \n",
       "6           242994    38.29       61.71  \n",
       "7           261318    38.34       61.66  \n",
       "8           109571    38.21       61.79  \n",
       "9           106856    38.48       61.52  \n",
       "10           34385    39.44       60.56  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List of chronic condition columns (already cleaned and used in your project)\n",
    "chronic_cols = [\n",
    "    'ChronicCond_Alzheimer', 'ChronicCond_Heartfailure', 'ChronicCond_KidneyDisease',\n",
    "    'ChronicCond_Cancer', 'ChronicCond_ObstrPulmonary', 'ChronicCond_Depression',\n",
    "    'ChronicCond_Diabetes', 'ChronicCond_IschemicHeart', 'ChronicCond_Osteoporasis',\n",
    "    'ChronicCond_rheumatoidarthritis', 'ChronicCond_stroke'\n",
    "]\n",
    "\n",
    "# Get the fraud label column\n",
    "fraud = train_full['PotentialFraud']\n",
    "\n",
    "# Create an empty list to collect stats\n",
    "condition_stats = []\n",
    "\n",
    "for col in chronic_cols:\n",
    "    # Only look at rows where this condition is marked as 1 (present)\n",
    "    has_condition = train_full[train_full[col] == 1]\n",
    "\n",
    "    # Count how many are fraud vs. not fraud\n",
    "    counts = has_condition['PotentialFraud'].value_counts()\n",
    "\n",
    "    # Get percentages (normalize=True gives proportion)\n",
    "    percentages = has_condition['PotentialFraud'].value_counts(normalize=True) * 100\n",
    "\n",
    "    # Append to the results list\n",
    "    condition_stats.append({\n",
    "        \"Condition\": col.replace(\"ChronicCond_\", \"\"),\n",
    "        \"Total Patients with Condition\": len(has_condition),\n",
    "        \"Fraud Count\": counts.get(\"Yes\", 0),\n",
    "        \"No Fraud Count\": counts.get(\"No\", 0),\n",
    "        \"% Fraud\": round(percentages.get(\"Yes\", 0), 2),\n",
    "        \"% No Fraud\": round(percentages.get(\"No\", 0), 2)\n",
    "    })\n",
    "\n",
    "# Convert to DataFrame\n",
    "import pandas as pd\n",
    "cond_stats_df = pd.DataFrame(condition_stats)\n",
    "\n",
    "# Display the table\n",
    "cond_stats_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5iXnFBTx7b6D",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 607
    },
    "id": "5iXnFBTx7b6D",
    "outputId": "6a86d962-9a23-4afd-9898-518c8108d86a"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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WbNmlSSFhISoSJEiaty4sdKlS6cVK1borbfeUmxsrHr06CFJmjhxonr16iUPDw9rz5tHbfunn35SvXr1VKZMGQ0dOlROTk7W5Ncvv/yil19+2aZ+q1atlDdvXo0ePVq7d+/WzJkz5ePjozFjxkiSvv76a73xxht6+eWX1bVrV0n/NwzuzTff1JIlS9SzZ08VLlxYV69e1ZYtW3TgwAGVLl36oTFWqlRJX3/9tXbs2GE9Kd66dasqVKigChUqKCwsTH/++aeKFy9uXVawYEHrfksOMTExCSZZrl+/nqjnL1++XJL03//+N0nbrFOnjsqVK6fPPvtM69ev17hx45Q/f351797dpu7s2bN1584dde3aVa6ursqSJUui3qsPelzbJuTWrVuqXLmyDhw4oM6dO6t06dK6cuWKli9frjNnzihbtmwJPm/VqlW6d+9eovfHX3/9pcqVK8vT01PvvPOO0qdPry+//FLVqlXT5s2bVa5cOZv6vXr1UubMmTV06FCdOHFCEydOVM+ePbVw4UJrnSFDhmjkyJGqX7++6tevr927d+uVV1557BDKwYMHKywsTGfOnLH25nrUpPT2aAcfHx9lyJBBK1asUK9evZQlS5aH1o2NjVXjxo21ZcsWde3aVYUKFdL+/fs1YcIEHT582GY+uI8//lgffvihWrVqpTfeeEOXL1/W5MmTVaVKFe3Zs8emJ+j169dVt25dNWvWTK1atdKSJUv07rvvqlixYqpXr94j96kkbd68WQsXLlTv3r3l6uqqqVOnqm7duvrtt99UtGhRVatWTblz59Y333xjM5RXup/Myp8/v00PyIe5efNmvM/yg/sroc9SeHi4Zs6cqbZt26pLly66efOmZs2apTp16ui33357oqFUa9euVfPmzVW4cGGNHj1aV69etV50P07r1q3Vvn177dy502Yo4smTJ7V9+3Z9+umnku5/bho2bKjixYtr+PDhcnV11dGjR+MlA5KqXbt2GjFihIYPH66mTZs+tLdUZGSkqlWrpqNHj6pnz57KmzevFi9erI4dO+rGjRt6++23beovWLBAN2/eVLdu3WSxWDR27Fg1a9ZM//zzT6KHxP67bdOnT28zPL9ly5YKCgrSqFGjrPNirVu3Tv/88486deokPz8//fXXX5o+fbr++usvbd++/Yl6g73xxhuaP3++2rVrpwoVKuin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ayssLMzR4eFfHjwp+uCDD/Taa6+pTp06+u9//6v+/ftLena/KBzp3Llzypo1qw4ePKg7d+7IYrEoJibG0WEhmfz7u+fevXuSpDZt2igoKEjLli2TRG+p5BJ3jBoyZIgaNmyokiVLatKkSfTssKO4H5s6deqkjz/+WB999JEKFy5ss5xzstQv7sKwffv2euWVV7Rp0yaVL19er732miTxPWUnDybax48fr9mzZ2vlypXq3LmzsmTJImMMyalnmMVi0Zo1a/Sf//xHo0eP1rBhw5QtWzZHh+VQFotFq1atUuvWrdWyZUt98803qlOnjkaMGKH169c7OrwnRlLqORF3guPq6qoVK1aoatWqOnjwoJYuXWo9oHMSlLqcO3dOQ4YM0fDhwzVt2jS9/vrrypAhg4KCguTl5WWtR7ulDnEnRaNGjVJISIgmTZqkHTt2KDg4WBMmTNDevXsdG+Azqn79+nr//fdVqlQpdenSRfv27ZOzszNJijTgwYuJ6dOn648//rDefCNPnjwKCgrS7NmzJYneUk/pwc9LSEiIZsyYodatW6t169YaOHCgRo4cqRMnTjguwOfM8uXL1bBhQ3Xr1k3h4eH6+eef1b17d7Vs2VKHDx/mnOwZ8vvvv6tIkSLq2rWrYmNj1a5dO929e1fOzs7WJDuSX7NmzXTy5Enrd0NMTIx2796tbt26qXTp0jp58qSWLVumV155RX379tWGDRscHDESY/r06TZD9O7evaulS5eqa9eu6tSpk5ydnfXHH39owIAB+vzzz/XHH384MFrHuHfvnr7//nsNGjRIPXv2VM6cOTVjxgy9+eabqlWrlqPDe2Kc5aVxcSc1169fV0REhC5evKicOXNq/vz5ypEjhyZNmmQ9UHMSlLrExMQoJiZGvXv31pkzZ/Tyyy+rcePGmjp1qiRZJwGm903qERkZqZ07dyokJESVK1fW77//rvnz52vatGkqWbIkd7t8jLjjz969e7Vq1SrNmjVL4eHhql69uj799FPlzZtXXbt21f79++Xk5ERi6hn2YM/CjRs36qefflKFChXUvXt3zZo1S5I0cuRI3blzx3rMw5OL29d79+7VhQsXFBISorfffltjx47Vd999p3nz5mncuHE6efKkgyNNux48v8qcObP279+v0NBQdenSRZ988okOHDig69evq3r16oqMjOS7PZWzWCza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\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Rebuild the results from scratch\n",
    "rows = []\n",
    "\n",
    "for col in chronic_cols:\n",
    "    # Filter patients who have the condition (value == 1)\n",
    "    condition_df = train_full[train_full[col] == 1]\n",
    "\n",
    "    # Get total and fraud counts\n",
    "    total = len(condition_df)\n",
    "    fraud_counts = condition_df[\"PotentialFraud\"].value_counts(normalize=True) * 100\n",
    "\n",
    "    rows.append({\n",
    "        'Condition': col.replace(\"ChronicCond_\", \"\"),\n",
    "        'Fraud_Yes_%': fraud_counts.get('Yes', 0),\n",
    "        'Fraud_No_%': fraud_counts.get('No', 0),\n",
    "        'N': total  # Optional: you can use this to label how many patients had the condition\n",
    "    })\n",
    "\n",
    "fraud_by_condition = pd.DataFrame(rows)\n",
    "\n",
    "# Melt for plotting\n",
    "fraud_by_condition_melted = pd.melt(\n",
    "    fraud_by_condition,\n",
    "    id_vars='Condition',\n",
    "    value_vars=['Fraud_Yes_%', 'Fraud_No_%'],\n",
    "    var_name='FraudStatus',\n",
    "    value_name='Percentage'\n",
    ")\n",
    "\n",
    "fraud_by_condition_melted['FraudStatus'] = fraud_by_condition_melted['FraudStatus'].str.replace('Fraud_', '').str.replace('_%', '')\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.barplot(data=fraud_by_condition_melted, x='Condition', y='Percentage', hue='FraudStatus', palette='Set2')\n",
    "plt.title('% of Patients WITH Chronic Condition Seen by Fraud vs. Non-Fraud Providers')\n",
    "plt.ylabel('Percentage of Patients (%)')\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ZtMNq4xo8fKY",
   "metadata": {
    "id": "ZtMNq4xo8fKY"
   },
   "source": [
    "Reimbursement Amounts – Fraud vs. Non-Fraud\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0ftXH7VW8e4u",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 601
    },
    "id": "0ftXH7VW8e4u",
    "outputId": "75dc4d85-4974-4ff9-b307-131c7acebe96"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Set style\n",
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "# Plot distribution\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.boxplot(data=train_full, x='PotentialFraud', y='InscClaimAmtReimbursed', showfliers=False)\n",
    "plt.title('Distribution of Insurance Reimbursement by Fraud Status')\n",
    "plt.xlabel('Potential Fraud')\n",
    "plt.ylabel('Insurance Claim Amount Reimbursed')\n",
    "plt.yscale('log')  # optional: log scale to compress extreme values\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "cZ98dGVz8yrV",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 143
    },
    "id": "cZ98dGVz8yrV",
    "outputId": "3db58161-2b07-4f8b-babd-4268f532e58e"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"summary_stats\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"PotentialFraud\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 93775.79421417875,\n        \"min\": 212796.0,\n        \"max\": 345415.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          212796.0,\n          345415.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 448.5119720995752,\n        \"min\": 755.2133520547746,\n        \"max\": 1389.5050658846972,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1389.5050658846972,\n          755.2133520547746\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1222.3150482102408,\n        \"min\": 3056.4601661739684,\n        \"max\": 4785.074684845615,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4785.074684845615,\n          3056.4601661739684\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 40.0,\n        \"max\": 40.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          40.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.0710678118654755,\n        \"min\": 80.0,\n        \"max\": 90.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          90.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.71067811865476,\n        \"min\": 300.0,\n        \"max\": 400.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 125000.0,\n        \"max\": 125000.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          125000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe",
       "variable_name": "summary_stats"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-15a859df-7850-4ae0-b9f6-b665d11e1c26\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PotentialFraud</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>No</th>\n",
       "      <td>345415.0</td>\n",
       "      <td>755.213352</td>\n",
       "      <td>3056.460166</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>125000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yes</th>\n",
       "      <td>212796.0</td>\n",
       "      <td>1389.505066</td>\n",
       "      <td>4785.074685</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>125000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-15a859df-7850-4ae0-b9f6-b665d11e1c26')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-15a859df-7850-4ae0-b9f6-b665d11e1c26 button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-15a859df-7850-4ae0-b9f6-b665d11e1c26');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-96bfc594-4be2-4aab-8f33-f69b88ea9c4e\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-96bfc594-4be2-4aab-8f33-f69b88ea9c4e')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-96bfc594-4be2-4aab-8f33-f69b88ea9c4e button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "  <div id=\"id_82d81963-f26a-4d32-b420-18f353f0db11\">\n",
       "    <style>\n",
       "      .colab-df-generate {\n",
       "        background-color: #E8F0FE;\n",
       "        border: none;\n",
       "        border-radius: 50%;\n",
       "        cursor: pointer;\n",
       "        display: none;\n",
       "        fill: #1967D2;\n",
       "        height: 32px;\n",
       "        padding: 0 0 0 0;\n",
       "        width: 32px;\n",
       "      }\n",
       "\n",
       "      .colab-df-generate:hover {\n",
       "        background-color: #E2EBFA;\n",
       "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "        fill: #174EA6;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate {\n",
       "        background-color: #3B4455;\n",
       "        fill: #D2E3FC;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate:hover {\n",
       "        background-color: #434B5C;\n",
       "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "        fill: #FFFFFF;\n",
       "      }\n",
       "    </style>\n",
       "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('summary_stats')\"\n",
       "            title=\"Generate code using this dataframe.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "    <script>\n",
       "      (() => {\n",
       "      const buttonEl =\n",
       "        document.querySelector('#id_82d81963-f26a-4d32-b420-18f353f0db11 button.colab-df-generate');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      buttonEl.onclick = () => {\n",
       "        google.colab.notebook.generateWithVariable('summary_stats');\n",
       "      }\n",
       "      })();\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "                   count         mean          std  min   25%   50%    75%  \\\n",
       "PotentialFraud                                                               \n",
       "No              345415.0   755.213352  3056.460166  0.0  40.0  80.0  300.0   \n",
       "Yes             212796.0  1389.505066  4785.074685  0.0  40.0  90.0  400.0   \n",
       "\n",
       "                     max  \n",
       "PotentialFraud            \n",
       "No              125000.0  \n",
       "Yes             125000.0  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summary stats by fraud status\n",
    "summary_stats = train_full.groupby(\"PotentialFraud\")[\"InscClaimAmtReimbursed\"].describe()\n",
    "summary_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "N0_0G77B8-5E",
   "metadata": {
    "id": "N0_0G77B8-5E"
   },
   "source": [
    "Length of Stay by Fraud Status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "-e3cSwHz8-vN",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 727
    },
    "id": "-e3cSwHz8-vN",
    "outputId": "bbff5ada-20e4-4ed6-b016-afecf7eade49"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"length_stats\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"PotentialFraud\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 93775.79421417875,\n        \"min\": 212796.0,\n        \"max\": 345415.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          212796.0,\n          345415.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2045202856275979,\n        \"min\": 1.6176801818102862,\n        \"max\": 1.9069155435252543,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.9069155435252543,\n          1.6176801818102862\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1642699497493352,\n        \"min\": 4.813117782085336,\n        \"max\": 5.045430572911193,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          5.045430572911193,\n          4.813117782085336\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7071067811865476,\n        \"min\": 35.0,\n        \"max\": 36.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          36.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe",
       "variable_name": "length_stats"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-c003108b-8713-4862-ae4a-e737fee22dd4\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PotentialFraud</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>No</th>\n",
       "      <td>345415.0</td>\n",
       "      <td>1.617680</td>\n",
       "      <td>4.813118</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yes</th>\n",
       "      <td>212796.0</td>\n",
       "      <td>1.906916</td>\n",
       "      <td>5.045431</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c003108b-8713-4862-ae4a-e737fee22dd4')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-c003108b-8713-4862-ae4a-e737fee22dd4 button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-c003108b-8713-4862-ae4a-e737fee22dd4');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-2719c215-6e92-401d-b51f-b07ae01173e0\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2719c215-6e92-401d-b51f-b07ae01173e0')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-2719c215-6e92-401d-b51f-b07ae01173e0 button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "  <div id=\"id_8551d95c-5dae-4963-8c48-5e3140579848\">\n",
       "    <style>\n",
       "      .colab-df-generate {\n",
       "        background-color: #E8F0FE;\n",
       "        border: none;\n",
       "        border-radius: 50%;\n",
       "        cursor: pointer;\n",
       "        display: none;\n",
       "        fill: #1967D2;\n",
       "        height: 32px;\n",
       "        padding: 0 0 0 0;\n",
       "        width: 32px;\n",
       "      }\n",
       "\n",
       "      .colab-df-generate:hover {\n",
       "        background-color: #E2EBFA;\n",
       "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "        fill: #174EA6;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate {\n",
       "        background-color: #3B4455;\n",
       "        fill: #D2E3FC;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate:hover {\n",
       "        background-color: #434B5C;\n",
       "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "        fill: #FFFFFF;\n",
       "      }\n",
       "    </style>\n",
       "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('length_stats')\"\n",
       "            title=\"Generate code using this dataframe.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "    <script>\n",
       "      (() => {\n",
       "      const buttonEl =\n",
       "        document.querySelector('#id_8551d95c-5dae-4963-8c48-5e3140579848 button.colab-df-generate');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      buttonEl.onclick = () => {\n",
       "        google.colab.notebook.generateWithVariable('length_stats');\n",
       "      }\n",
       "      })();\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "                   count      mean       std  min  25%  50%  75%   max\n",
       "PotentialFraud                                                        \n",
       "No              345415.0  1.617680  4.813118  0.0  0.0  0.0  0.0  35.0\n",
       "Yes             212796.0  1.906916  5.045431  0.0  0.0  0.0  0.0  36.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Ensure ClaimStartDt and ClaimEndDt are datetime\n",
    "train_full['ClaimStartDt'] = pd.to_datetime(train_full['ClaimStartDt'])\n",
    "train_full['ClaimEndDt'] = pd.to_datetime(train_full['ClaimEndDt'])\n",
    "\n",
    "# Calculate Length of Stay\n",
    "train_full['LengthOfStay'] = (train_full['ClaimEndDt'] - train_full['ClaimStartDt']).dt.days\n",
    "\n",
    "# Remove invalid/negative stays\n",
    "train_full = train_full[train_full['LengthOfStay'] >= 0]\n",
    "\n",
    "# Summary stats\n",
    "length_stats = train_full.groupby(\"PotentialFraud\")[\"LengthOfStay\"].describe()\n",
    "display(length_stats)\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.boxplot(data=train_full, x='PotentialFraud', y='LengthOfStay', showfliers=False)\n",
    "plt.title('Length of Stay by Fraud Status')\n",
    "plt.xlabel('Potential Fraud')\n",
    "plt.ylabel('Length of Stay (days)')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "Ht0aaBwO-PEn",
   "metadata": {
    "id": "Ht0aaBwO-PEn"
   },
   "source": [
    "Number of Unique Physicians per Provider"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "XIy40RB0-Ohg",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 727
    },
    "id": "XIy40RB0-Ohg",
    "outputId": "1dc918d1-2992-424b-a7a8-b94b9bf18246"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"physician_counts\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"PotentialFraud\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3109.855623658436,\n        \"min\": 506.0,\n        \"max\": 4904.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          506.0,\n          4904.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.221855422267033,\n        \"min\": 16.874388254486135,\n        \"max\": 52.54347826086956,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          52.54347826086956,\n          16.874388254486135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.95915849459813,\n        \"min\": 28.20040828363616,\n        \"max\": 71.98327010635505,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          71.98327010635505,\n          28.20040828363616\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.0710678118654755,\n        \"min\": 2.0,\n        \"max\": 12.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          12.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.97056274847714,\n        \"min\": 6.0,\n        \"max\": 30.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.11269837220809,\n        \"min\": 20.0,\n        \"max\": 64.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          64.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 147.07821048680188,\n        \"min\": 527.0,\n        \"max\": 735.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          735.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-e148f5a7-23e9-4cd0-9c3a-f9e9117ecb8a\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PotentialFraud</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>No</th>\n",
       "      <td>4904.0</td>\n",
       "      <td>16.874388</td>\n",
       "      <td>28.200408</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>527.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yes</th>\n",
       "      <td>506.0</td>\n",
       "      <td>52.543478</td>\n",
       "      <td>71.983270</td>\n",
       "      <td>1.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>735.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e148f5a7-23e9-4cd0-9c3a-f9e9117ecb8a')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-e148f5a7-23e9-4cd0-9c3a-f9e9117ecb8a button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-e148f5a7-23e9-4cd0-9c3a-f9e9117ecb8a');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-17369938-670f-41be-b7b4-61d692048cbc\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-17369938-670f-41be-b7b4-61d692048cbc')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-17369938-670f-41be-b7b4-61d692048cbc button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "                 count       mean        std  min   25%   50%   75%    max\n",
       "PotentialFraud                                                            \n",
       "No              4904.0  16.874388  28.200408  1.0   2.0   6.0  20.0  527.0\n",
       "Yes              506.0  52.543478  71.983270  1.0  12.0  30.0  64.0  735.0"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Select relevant columns\n",
    "physician_cols = ['AttendingPhysician', 'OperatingPhysician', 'OtherPhysician']\n",
    "\n",
    "# Stack and count unique physicians per Provider\n",
    "provider_physicians = pd.concat([\n",
    "    train_full[['Provider', col]].rename(columns={col: 'Physician'})\n",
    "    for col in physician_cols\n",
    "]).dropna().drop_duplicates()\n",
    "\n",
    "# Count how many unique physicians each provider has\n",
    "physician_counts = provider_physicians.groupby('Provider')['Physician'].nunique().reset_index()\n",
    "physician_counts.columns = ['Provider', 'NumUniquePhysicians']\n",
    "\n",
    "# Merge back to get fraud label\n",
    "provider_fraud = train_full[['Provider', 'PotentialFraud']].drop_duplicates()\n",
    "physician_counts = physician_counts.merge(provider_fraud, on='Provider', how='left')\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.boxplot(data=physician_counts, x='PotentialFraud', y='NumUniquePhysicians', showfliers=False)\n",
    "plt.title('Number of Unique Physicians per Provider by Fraud Status')\n",
    "plt.xlabel('Potential Fraud')\n",
    "plt.ylabel('Unique Physicians')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Summary table\n",
    "physician_counts.groupby('PotentialFraud')['NumUniquePhysicians'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "wfYfjfBb-n7i",
   "metadata": {
    "id": "wfYfjfBb-n7i"
   },
   "source": [
    "Claim Frequency per Beneficiary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "qiKEzVxR-oNL",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 672
    },
    "id": "qiKEzVxR-oNL",
    "outputId": "7866cf94-2581-491f-ac61-769a664bbcf3"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   count      mean       std  min  25%  50%  75%   max\n",
      "PotentialFraud                                                        \n",
      "No              113627.0  3.039902  2.519875  1.0  1.0  2.0  4.0  29.0\n",
      "Yes              83997.0  2.533376  2.228788  1.0  1.0  2.0  3.0  28.0\n"
     ]
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Step 1: Count number of claims per Beneficiary\n",
    "claim_counts = train_full.groupby(['BeneID', 'PotentialFraud']).size().reset_index(name='ClaimCount')\n",
    "\n",
    "# Step 2: Plot distribution of ClaimCount by Fraud status\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.boxplot(data=claim_counts, x='PotentialFraud', y='ClaimCount', showfliers=False)\n",
    "plt.title('Number of Claims per Beneficiary by Fraud Status')\n",
    "plt.xlabel('Potential Fraud')\n",
    "plt.ylabel('Number of Claims')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Count number of claims per beneficiary\n",
    "claims_per_beneficiary = train_full.groupby(['BeneID', 'PotentialFraud']).size().reset_index(name='ClaimCount')\n",
    "\n",
    "# Group by fraud status and describe\n",
    "claim_stats = claims_per_beneficiary.groupby('PotentialFraud')['ClaimCount'].describe()\n",
    "print(claim_stats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7ZlDdRmcAu28",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7ZlDdRmcAu28",
    "outputId": "eeb83f11-ab70-4d92-c706-375d7783aaf9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['BeneID', 'ClaimID', 'ClaimStartDt', 'ClaimEndDt', 'Provider', 'InscClaimAmtReimbursed', 'AttendingPhysician', 'OperatingPhysician', 'OtherPhysician', 'AdmissionDt', 'ClmAdmitDiagnosisCode', 'DeductibleAmtPaid', 'DischargeDt', 'DiagnosisGroupCode', 'ClmDiagnosisCode_1', 'ClmDiagnosisCode_2', 'ClmDiagnosisCode_3', 'ClmDiagnosisCode_4', 'ClmDiagnosisCode_5', 'ClmDiagnosisCode_6', 'ClmDiagnosisCode_7', 'ClmDiagnosisCode_8', 'ClmDiagnosisCode_9', 'ClmDiagnosisCode_10', 'ClmProcedureCode_1', 'ClmProcedureCode_2', 'ClmProcedureCode_3', 'ClmProcedureCode_4', 'ClmProcedureCode_5', 'ClmProcedureCode_6', 'Source', 'DOB', 'DOD', 'Gender', 'Race', 'RenalDiseaseIndicator', 'State', 'County', 'NoOfMonths_PartACov', 'NoOfMonths_PartBCov', 'ChronicCond_Alzheimer', 'ChronicCond_Heartfailure', 'ChronicCond_KidneyDisease', 'ChronicCond_Cancer', 'ChronicCond_ObstrPulmonary', 'ChronicCond_Depression', 'ChronicCond_Diabetes', 'ChronicCond_IschemicHeart', 'ChronicCond_Osteoporasis', 'ChronicCond_rheumatoidarthritis', 'ChronicCond_stroke', 'IPAnnualReimbursementAmt', 'IPAnnualDeductibleAmt', 'OPAnnualReimbursementAmt', 'OPAnnualDeductibleAmt', 'PotentialFraud', 'LogReimbursed', 'ClmDiagnosisCode_1_Named', 'ClmDiagnosisCode_10_Named', 'ClmDiagnosisCode_2_Named', 'ClmDiagnosisCode_3_Named', 'ClmDiagnosisCode_4_Named', 'ClmDiagnosisCode_5_Named', 'ClmDiagnosisCode_6_Named', 'ClmDiagnosisCode_7_Named', 'ClmDiagnosisCode_8_Named', 'ClmDiagnosisCode_9_Named', 'LengthOfStay']\n"
     ]
    }
   ],
   "source": [
    "print(train_full.columns.tolist())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "CVh_kqd2BQoE",
   "metadata": {
    "id": "CVh_kqd2BQoE"
   },
   "source": [
    "Claim Overlap or Frequency"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4hPcA0A4BYdq",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 727
    },
    "id": "4hPcA0A4BYdq",
    "outputId": "1f96ada0-cd31-4af4-fee2-035f38797fa2"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"claims_per_provider_stats\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"PotentialFraud\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3109.855623658436,\n        \"min\": 506.0,\n        \"max\": 4904.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          506.0,\n          4904.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 247.5652227993467,\n        \"min\": 70.43535889070147,\n        \"max\": 420.54545454545456,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          420.54545454545456,\n          70.43535889070147\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 419.8743322027081,\n        \"min\": 128.94250973040607,\n        \"max\": 722.7344848238222,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          722.7344848238222,\n          128.94250973040607\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.476659402887016,\n        \"min\": 9.0,\n        \"max\": 62.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          62.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 90.86322138247135,\n        \"min\": 27.0,\n        \"max\": 155.5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          155.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 254.55844122715712,\n        \"min\": 72.0,\n        \"max\": 432.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          432.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4946.2119343999,\n        \"min\": 1245.0,\n        \"max\": 8240.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          8240.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe",
       "variable_name": "claims_per_provider_stats"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-774cf637-4981-4192-9ac4-aa7d9641fd4d\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PotentialFraud</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>No</th>\n",
       "      <td>4904.0</td>\n",
       "      <td>70.435359</td>\n",
       "      <td>128.942510</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>1245.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yes</th>\n",
       "      <td>506.0</td>\n",
       "      <td>420.545455</td>\n",
       "      <td>722.734485</td>\n",
       "      <td>1.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>155.5</td>\n",
       "      <td>432.0</td>\n",
       "      <td>8240.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-774cf637-4981-4192-9ac4-aa7d9641fd4d')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-774cf637-4981-4192-9ac4-aa7d9641fd4d button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-774cf637-4981-4192-9ac4-aa7d9641fd4d');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-66172609-fafa-4521-b500-a537ae98404a\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-66172609-fafa-4521-b500-a537ae98404a')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-66172609-fafa-4521-b500-a537ae98404a button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "  <div id=\"id_9ac0af3f-4e4f-44d0-a850-d993f3156a57\">\n",
       "    <style>\n",
       "      .colab-df-generate {\n",
       "        background-color: #E8F0FE;\n",
       "        border: none;\n",
       "        border-radius: 50%;\n",
       "        cursor: pointer;\n",
       "        display: none;\n",
       "        fill: #1967D2;\n",
       "        height: 32px;\n",
       "        padding: 0 0 0 0;\n",
       "        width: 32px;\n",
       "      }\n",
       "\n",
       "      .colab-df-generate:hover {\n",
       "        background-color: #E2EBFA;\n",
       "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "        fill: #174EA6;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate {\n",
       "        background-color: #3B4455;\n",
       "        fill: #D2E3FC;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate:hover {\n",
       "        background-color: #434B5C;\n",
       "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "        fill: #FFFFFF;\n",
       "      }\n",
       "    </style>\n",
       "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('claims_per_provider_stats')\"\n",
       "            title=\"Generate code using this dataframe.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "    <script>\n",
       "      (() => {\n",
       "      const buttonEl =\n",
       "        document.querySelector('#id_9ac0af3f-4e4f-44d0-a850-d993f3156a57 button.colab-df-generate');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      buttonEl.onclick = () => {\n",
       "        google.colab.notebook.generateWithVariable('claims_per_provider_stats');\n",
       "      }\n",
       "      })();\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "                 count        mean         std  min   25%    50%    75%  \\\n",
       "PotentialFraud                                                            \n",
       "No              4904.0   70.435359  128.942510  1.0   9.0   27.0   72.0   \n",
       "Yes              506.0  420.545455  722.734485  1.0  62.0  155.5  432.0   \n",
       "\n",
       "                   max  \n",
       "PotentialFraud          \n",
       "No              1245.0  \n",
       "Yes             8240.0  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Count claims per provider\n",
    "claims_per_provider = train_full['Provider'].value_counts().reset_index()\n",
    "claims_per_provider.columns = ['Provider', 'NumClaims']\n",
    "\n",
    "# Merge with fraud status\n",
    "provider_fraud = train_full[['Provider', 'PotentialFraud']].drop_duplicates()\n",
    "claims_per_provider = claims_per_provider.merge(provider_fraud, on='Provider', how='left')\n",
    "\n",
    "# Boxplot to compare\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.boxplot(data=claims_per_provider, x='PotentialFraud', y='NumClaims', showfliers=False)\n",
    "plt.title('Number of Claims per Provider by Fraud Status')\n",
    "plt.xlabel('Potential Fraud')\n",
    "plt.ylabel('Number of Claims')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Summarize claims per provider by fraud status\n",
    "claims_per_provider_stats = claims_per_provider.groupby('PotentialFraud')['NumClaims'].describe()\n",
    "claims_per_provider_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "jBGYJ_T1BfS8",
   "metadata": {
    "id": "jBGYJ_T1BfS8"
   },
   "source": [
    "Patients Visiting Multiple Providers\n",
    "\n",
    "If a patient (BeneID) appears across many providers, it could suggest suspicious provider-sharing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ZUiQAHivBfyN",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 727
    },
    "id": "ZUiQAHivBfyN",
    "outputId": "46434ade-8268-49d1-d54c-d7bce4c7f5a3"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"summary\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"PotentialFraud\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18772.270826940465,\n        \"min\": 56004.0,\n        \"max\": 82552.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          56004.0,\n          82552.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03695854644078545,\n        \"min\": 2.6009182091287917,\n        \"max\": 2.6531854867509463,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2.6531854867509463,\n          2.6009182091287917\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.059622414095803426,\n        \"min\": 1.8026294843544208,\n        \"max\": 1.8869483109901308,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.8869483109901308,\n          1.8026294843544208\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 2.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 3.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8284271247461903,\n        \"min\": 16.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          20.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe",
       "variable_name": "summary"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-ba1349af-1350-4461-b306-38cc29ad8de4\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PotentialFraud</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>No</th>\n",
       "      <td>82552.0</td>\n",
       "      <td>2.600918</td>\n",
       "      <td>1.802629</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yes</th>\n",
       "      <td>56004.0</td>\n",
       "      <td>2.653185</td>\n",
       "      <td>1.886948</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba1349af-1350-4461-b306-38cc29ad8de4')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-ba1349af-1350-4461-b306-38cc29ad8de4 button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-ba1349af-1350-4461-b306-38cc29ad8de4');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-8e965835-a84a-410f-9b84-e67b2e2c150e\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8e965835-a84a-410f-9b84-e67b2e2c150e')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-8e965835-a84a-410f-9b84-e67b2e2c150e button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "  <div id=\"id_6875d0d4-2a76-4dd6-9159-91b3df121ac5\">\n",
       "    <style>\n",
       "      .colab-df-generate {\n",
       "        background-color: #E8F0FE;\n",
       "        border: none;\n",
       "        border-radius: 50%;\n",
       "        cursor: pointer;\n",
       "        display: none;\n",
       "        fill: #1967D2;\n",
       "        height: 32px;\n",
       "        padding: 0 0 0 0;\n",
       "        width: 32px;\n",
       "      }\n",
       "\n",
       "      .colab-df-generate:hover {\n",
       "        background-color: #E2EBFA;\n",
       "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "        fill: #174EA6;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate {\n",
       "        background-color: #3B4455;\n",
       "        fill: #D2E3FC;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate:hover {\n",
       "        background-color: #434B5C;\n",
       "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "        fill: #FFFFFF;\n",
       "      }\n",
       "    </style>\n",
       "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('summary')\"\n",
       "            title=\"Generate code using this dataframe.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "    <script>\n",
       "      (() => {\n",
       "      const buttonEl =\n",
       "        document.querySelector('#id_6875d0d4-2a76-4dd6-9159-91b3df121ac5 button.colab-df-generate');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      buttonEl.onclick = () => {\n",
       "        google.colab.notebook.generateWithVariable('summary');\n",
       "      }\n",
       "      })();\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "                  count      mean       std  min  25%  50%  75%   max\n",
       "PotentialFraud                                                       \n",
       "No              82552.0  2.600918  1.802629  1.0  1.0  2.0  3.0  16.0\n",
       "Yes             56004.0  2.653185  1.886948  1.0  1.0  2.0  3.0  20.0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Count unique providers per patient\n",
    "bene_provider_counts = train_full.groupby('BeneID')['Provider'].nunique().value_counts().reset_index()\n",
    "bene_provider_counts.columns = ['NumProvidersSeen', 'NumPatients']\n",
    "bene_provider_counts = bene_provider_counts.sort_values('NumProvidersSeen')\n",
    "\n",
    "# Plot distribution\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(data=bene_provider_counts, x='NumProvidersSeen', y='NumPatients')\n",
    "plt.title('How Many Providers a Patient Has Seen')\n",
    "plt.xlabel('Number of Unique Providers')\n",
    "plt.ylabel('Number of Patients')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Count number of unique providers per beneficiary\n",
    "providers_per_patient = train_full.groupby('BeneID')['Provider'].nunique().reset_index(name='ProviderCount')\n",
    "\n",
    "# Merge with fraud labels (via Provider)\n",
    "patient_fraud_status = train_full[['BeneID', 'Provider', 'PotentialFraud']].drop_duplicates()\n",
    "providers_per_patient = providers_per_patient.merge(patient_fraud_status, on='BeneID', how='left')\n",
    "\n",
    "# Keep only one fraud label per patient — based on most frequent (or take first)\n",
    "providers_per_patient = providers_per_patient.drop_duplicates(subset='BeneID')\n",
    "\n",
    "# Summary stats\n",
    "summary = providers_per_patient.groupby('PotentialFraud')['ProviderCount'].describe()\n",
    "summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "CSqK4OscLmfh",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 363
    },
    "id": "CSqK4OscLmfh",
    "outputId": "d4f0c9f1-c985-4ccc-d959-7b9fd5cc1bf5"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"result_df\",\n  \"rows\": 485,\n  \"fields\": [\n    {\n      \"column\": \"BeneID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 485,\n        \"samples\": [\n          \"BENE66100\",\n          \"BENE101570\",\n          \"BENE135411\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumProviders\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 11,\n        \"max\": 20,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          12,\n          19,\n          14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"% No Fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15640346974394495,\n        \"min\": 0.16,\n        \"max\": 1.0,\n        \"num_unique_values\": 95,\n        \"samples\": [\n          0.8888888888888888,\n          0.4444444444444444,\n          0.9565217391304348\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"% Fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15640346974394492,\n        \"min\": 0.0,\n        \"max\": 0.84,\n        \"num_unique_values\": 95,\n        \"samples\": [\n          0.1111111111111111,\n          0.5555555555555556,\n          0.043478260869565216\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe",
       "variable_name": "result_df"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-201112ff-d88d-4c59-90a1-9c46c12619ca\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BeneID</th>\n",
       "      <th>NumProviders</th>\n",
       "      <th>% No Fraud</th>\n",
       "      <th>% Fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BENE40202</td>\n",
       "      <td>20</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BENE122118</td>\n",
       "      <td>19</td>\n",
       "      <td>0.846154</td>\n",
       "      <td>0.153846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BENE133498</td>\n",
       "      <td>17</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BENE122143</td>\n",
       "      <td>17</td>\n",
       "      <td>0.777778</td>\n",
       "      <td>0.222222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BENE120090</td>\n",
       "      <td>17</td>\n",
       "      <td>0.727273</td>\n",
       "      <td>0.272727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>BENE25386</td>\n",
       "      <td>16</td>\n",
       "      <td>0.812500</td>\n",
       "      <td>0.187500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>BENE140999</td>\n",
       "      <td>16</td>\n",
       "      <td>0.722222</td>\n",
       "      <td>0.277778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>BENE153509</td>\n",
       "      <td>16</td>\n",
       "      <td>0.812500</td>\n",
       "      <td>0.187500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>BENE107120</td>\n",
       "      <td>16</td>\n",
       "      <td>0.705882</td>\n",
       "      <td>0.294118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>BENE118823</td>\n",
       "      <td>16</td>\n",
       "      <td>0.863636</td>\n",
       "      <td>0.136364</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-201112ff-d88d-4c59-90a1-9c46c12619ca')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-201112ff-d88d-4c59-90a1-9c46c12619ca button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-201112ff-d88d-4c59-90a1-9c46c12619ca');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-0631d188-b697-4090-823e-48ea3724494a\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0631d188-b697-4090-823e-48ea3724494a')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-0631d188-b697-4090-823e-48ea3724494a button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "        BeneID  NumProviders  % No Fraud   % Fraud\n",
       "0    BENE40202            20    0.666667  0.333333\n",
       "1   BENE122118            19    0.846154  0.153846\n",
       "4   BENE133498            17    0.600000  0.400000\n",
       "2   BENE122143            17    0.777778  0.222222\n",
       "3   BENE120090            17    0.727273  0.272727\n",
       "12   BENE25386            16    0.812500  0.187500\n",
       "10  BENE140999            16    0.722222  0.277778\n",
       "9   BENE153509            16    0.812500  0.187500\n",
       "5   BENE107120            16    0.705882  0.294118\n",
       "7   BENE118823            16    0.863636  0.136364"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Count unique providers per patient\n",
    "patient_provider_counts = train_full.groupby('BeneID')['Provider'].nunique()\n",
    "\n",
    "# Filter patients with more than, say, 10 providers\n",
    "suspicious_patients = patient_provider_counts[patient_provider_counts > 10].sort_values(ascending=False)\n",
    "suspicious_patients_df = suspicious_patients.reset_index().rename(columns={'Provider': 'NumProviders'})\n",
    "\n",
    "# Get only those patients' claims\n",
    "suspicious_claims = train_full[train_full['BeneID'].isin(suspicious_patients.index)]\n",
    "\n",
    "# Group by patient and check how many of their claims are with fraudulent providers\n",
    "fraud_by_patient = suspicious_claims.groupby('BeneID')['PotentialFraud'].value_counts(normalize=True).unstack(fill_value=0)\n",
    "fraud_by_patient.columns = ['% No Fraud', '% Fraud']\n",
    "fraud_by_patient = fraud_by_patient.reset_index()\n",
    "\n",
    "# Merge with provider count\n",
    "result_df = suspicious_patients_df.merge(fraud_by_patient, on='BeneID', how='left')\n",
    "\n",
    "# Sort by highest provider count\n",
    "result_df = result_df.sort_values('NumProviders', ascending=False)\n",
    "result_df.head(10)  # Show the top 10 suspicious patients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "aJrKZpTkMDnU",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 363
    },
    "id": "aJrKZpTkMDnU",
    "outputId": "8ba9beac-7de8-467b-9b01-422b2696b972"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"summary_df\",\n  \"rows\": 30,\n  \"fields\": [\n    {\n      \"column\": \"BeneID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"BENE122118\",\n          \"BENE11132\",\n          \"BENE77507\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumClaims\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 16,\n        \"max\": 27,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          19,\n          20,\n          17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumProviders\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 15,\n        \"max\": 20,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          17,\n          19,\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AvgChronicConditions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8864306744895698,\n        \"min\": 2.0,\n        \"max\": 9.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.0,\n          3.0,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PercentFraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.211509233449524,\n        \"min\": 11.76470588235294,\n        \"max\": 57.14285714285714,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          57.14285714285714,\n          45.0,\n          27.27272727272727\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe",
       "variable_name": "summary_df"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-a0b2ed04-2c0c-4948-bd6f-31cd0b8aac1a\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BeneID</th>\n",
       "      <th>NumClaims</th>\n",
       "      <th>NumProviders</th>\n",
       "      <th>AvgChronicConditions</th>\n",
       "      <th>PercentFraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BENE109091</td>\n",
       "      <td>21</td>\n",
       "      <td>15</td>\n",
       "      <td>9.0</td>\n",
       "      <td>57.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>BENE145288</td>\n",
       "      <td>21</td>\n",
       "      <td>15</td>\n",
       "      <td>6.0</td>\n",
       "      <td>57.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>BENE64791</td>\n",
       "      <td>20</td>\n",
       "      <td>15</td>\n",
       "      <td>9.0</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BENE111377</td>\n",
       "      <td>20</td>\n",
       "      <td>15</td>\n",
       "      <td>8.0</td>\n",
       "      <td>40.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>BENE133498</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "      <td>6.0</td>\n",
       "      <td>40.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>BENE122820</td>\n",
       "      <td>22</td>\n",
       "      <td>15</td>\n",
       "      <td>7.0</td>\n",
       "      <td>36.363636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>BENE142566</td>\n",
       "      <td>21</td>\n",
       "      <td>15</td>\n",
       "      <td>9.0</td>\n",
       "      <td>33.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>BENE40202</td>\n",
       "      <td>27</td>\n",
       "      <td>20</td>\n",
       "      <td>8.0</td>\n",
       "      <td>33.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>BENE94509</td>\n",
       "      <td>18</td>\n",
       "      <td>15</td>\n",
       "      <td>8.0</td>\n",
       "      <td>33.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>BENE52332</td>\n",
       "      <td>20</td>\n",
       "      <td>15</td>\n",
       "      <td>4.0</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0b2ed04-2c0c-4948-bd6f-31cd0b8aac1a')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-a0b2ed04-2c0c-4948-bd6f-31cd0b8aac1a button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-a0b2ed04-2c0c-4948-bd6f-31cd0b8aac1a');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-638afc48-96c6-4d79-a541-efd70d081500\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-638afc48-96c6-4d79-a541-efd70d081500')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-638afc48-96c6-4d79-a541-efd70d081500 button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "        BeneID  NumClaims  NumProviders  AvgChronicConditions  PercentFraud\n",
       "1   BENE109091         21            15                   9.0     57.142857\n",
       "15  BENE145288         21            15                   6.0     57.142857\n",
       "26   BENE64791         20            15                   9.0     45.000000\n",
       "3   BENE111377         20            15                   8.0     40.000000\n",
       "11  BENE133498         20            17                   6.0     40.000000\n",
       "9   BENE122820         22            15                   7.0     36.363636\n",
       "14  BENE142566         21            15                   9.0     33.333333\n",
       "24   BENE40202         27            20                   8.0     33.333333\n",
       "29   BENE94509         18            15                   8.0     33.333333\n",
       "25   BENE52332         20            15                   4.0     30.000000"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Step 1: Count number of unique providers seen by each patient\n",
    "provider_counts = train_full.groupby('BeneID')['Provider'].nunique().reset_index()\n",
    "provider_counts.columns = ['BeneID', 'NumProviders']\n",
    "\n",
    "# Step 2: Filter to patients who saw 15 or more providers\n",
    "high_provider_patients = provider_counts[provider_counts['NumProviders'] >= 15].copy()\n",
    "bene_ids = high_provider_patients['BeneID'].tolist()\n",
    "\n",
    "# Step 3: List of chronic condition columns\n",
    "chronic_cols = [col for col in train_full.columns if col.startswith(\"ChronicCond_\")]\n",
    "\n",
    "# Step 4: Subset original data for these patients\n",
    "subset = train_full[train_full['BeneID'].isin(bene_ids)].copy()\n",
    "\n",
    "# Step 5: Compute chronic condition counts per claim\n",
    "subset['ChronicCount'] = subset[chronic_cols].eq(1).sum(axis=1)\n",
    "\n",
    "# Step 6: Group and summarize\n",
    "summary_df = subset.groupby('BeneID').agg(\n",
    "    NumClaims=('ClaimID', 'nunique'),\n",
    "    NumProviders=('Provider', 'nunique'),\n",
    "    AvgChronicConditions=('ChronicCount', 'mean'),\n",
    "    PercentFraud=('PotentialFraud', lambda x: (x == 'Yes').mean() * 100)\n",
    ").reset_index()\n",
    "\n",
    "# Step 7: Sort by fraud percentage\n",
    "summary_df = summary_df.sort_values(by='PercentFraud', ascending=False)\n",
    "\n",
    "# Show the results\n",
    "summary_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "lpXqYk77BOuR",
   "metadata": {
    "id": "lpXqYk77BOuR"
   },
   "source": [
    "Annual Reimbursement & Deductibles"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "wbYA7Im6BMcW",
   "metadata": {
    "id": "wbYA7Im6BMcW"
   },
   "source": [
    "Patient Demographics vs. *Fraud*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "AmtMCp6WDSKB",
   "metadata": {
    "id": "AmtMCp6WDSKB"
   },
   "source": [
    "Age Distribution by Fraud Status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7LTNGi9lDS1S",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 907
    },
    "id": "7LTNGi9lDS1S",
    "outputId": "8650a1f6-e598-4e79-e2ca-7600f84bf081"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   count       mean        std   min   25%   50%   75%    max\n",
      "PotentialFraud                                                               \n",
      "No              345415.0  73.192968  13.018338  26.0  67.0  74.0  82.0  100.0\n",
      "Yes             212796.0  73.412931  12.999957  26.0  68.0  74.0  82.0  100.0\n",
      "PotentialFraud      No    Yes   Total  % Fraud\n",
      "AgeGroup                                      \n",
      "0–20                 0      0       0      NaN\n",
      "21–30             1964   1168    3132    37.29\n",
      "31–40             6644   3945   10589    37.26\n",
      "41–50            13124   8013   21137    37.91\n",
      "51–60            22258  13101   35359    37.05\n",
      "61–70            69965  42463  112428    37.77\n",
      "71–80           120551  74310  194861    38.13\n",
      "81+             108779  68502  177281    38.64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipython-input-28-3606485772.py:29: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  age_group_counts = train_full.groupby(['AgeGroup', 'PotentialFraud']).size().unstack(fill_value=0)\n"
     ]
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Convert DOB to datetime (if not already)\n",
    "train_full['DOB'] = pd.to_datetime(train_full['DOB'], errors='coerce')\n",
    "\n",
    "# Estimate age (assume claim year ~ 2009 for example)\n",
    "claim_year = 2009\n",
    "train_full['Age'] = claim_year - train_full['DOB'].dt.year\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.histplot(data=train_full, x='Age', hue='PotentialFraud', bins=30, kde=True, multiple='stack')\n",
    "plt.title('Age Distribution by Fraud Status')\n",
    "plt.xlabel('Patient Age')\n",
    "plt.ylabel('Number of Claims')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "# Group and describe age\n",
    "age_stats = train_full.groupby('PotentialFraud')['Age'].describe()\n",
    "print(age_stats)\n",
    "\n",
    "# Define age bins\n",
    "bins = [0, 20, 30, 40, 50, 60, 70, 80, 100]\n",
    "labels = ['0–20', '21–30', '31–40', '41–50', '51–60', '61–70', '71–80', '81+']\n",
    "train_full['AgeGroup'] = pd.cut(train_full['Age'], bins=bins, labels=labels, right=False)\n",
    "\n",
    "# Count by age group and fraud\n",
    "age_group_counts = train_full.groupby(['AgeGroup', 'PotentialFraud']).size().unstack(fill_value=0)\n",
    "age_group_counts['Total'] = age_group_counts.sum(axis=1)\n",
    "age_group_counts['% Fraud'] = (age_group_counts['Yes'] / age_group_counts['Total'] * 100).round(2)\n",
    "print(age_group_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "EJxUqmBYDU0l",
   "metadata": {
    "id": "EJxUqmBYDU0l"
   },
   "source": [
    "Gender vs. Fraud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "Gxn8HaXpIe3m",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 527
    },
    "id": "Gxn8HaXpIe3m",
    "outputId": "9400c099-213b-4f1e-fee8-a01739b7deb8"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"gender_counts\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38598,\n        \"min\": 145414,\n        \"max\": 200001,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          200001,\n          145414\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23638,\n        \"min\": 89683,\n        \"max\": 123113,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          123113,\n          89683\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62237,\n        \"min\": 235097,\n        \"max\": 323114,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          323114,\n          235097\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"% Fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03535533905932537,\n        \"min\": 38.1,\n        \"max\": 38.15,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          38.1,\n          38.15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe",
       "variable_name": "gender_counts"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-a43691ee-2afe-4f94-a8ea-8a4a48e36a81\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>PotentialFraud</th>\n",
       "      <th>No</th>\n",
       "      <th>Yes</th>\n",
       "      <th>Total</th>\n",
       "      <th>% Fraud</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>145414</td>\n",
       "      <td>89683</td>\n",
       "      <td>235097</td>\n",
       "      <td>38.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>200001</td>\n",
       "      <td>123113</td>\n",
       "      <td>323114</td>\n",
       "      <td>38.10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a43691ee-2afe-4f94-a8ea-8a4a48e36a81')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-a43691ee-2afe-4f94-a8ea-8a4a48e36a81 button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-a43691ee-2afe-4f94-a8ea-8a4a48e36a81');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-7f3348dc-3fa1-4cb3-a0b4-ce6fb4248bde\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7f3348dc-3fa1-4cb3-a0b4-ce6fb4248bde')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-7f3348dc-3fa1-4cb3-a0b4-ce6fb4248bde button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "  <div id=\"id_b9fd69f9-85d6-4a67-a389-ca9ed18857dc\">\n",
       "    <style>\n",
       "      .colab-df-generate {\n",
       "        background-color: #E8F0FE;\n",
       "        border: none;\n",
       "        border-radius: 50%;\n",
       "        cursor: pointer;\n",
       "        display: none;\n",
       "        fill: #1967D2;\n",
       "        height: 32px;\n",
       "        padding: 0 0 0 0;\n",
       "        width: 32px;\n",
       "      }\n",
       "\n",
       "      .colab-df-generate:hover {\n",
       "        background-color: #E2EBFA;\n",
       "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "        fill: #174EA6;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate {\n",
       "        background-color: #3B4455;\n",
       "        fill: #D2E3FC;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate:hover {\n",
       "        background-color: #434B5C;\n",
       "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "        fill: #FFFFFF;\n",
       "      }\n",
       "    </style>\n",
       "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('gender_counts')\"\n",
       "            title=\"Generate code using this dataframe.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "    <script>\n",
       "      (() => {\n",
       "      const buttonEl =\n",
       "        document.querySelector('#id_b9fd69f9-85d6-4a67-a389-ca9ed18857dc button.colab-df-generate');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      buttonEl.onclick = () => {\n",
       "        google.colab.notebook.generateWithVariable('gender_counts');\n",
       "      }\n",
       "      })();\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "PotentialFraud      No     Yes   Total  % Fraud\n",
       "Gender                                         \n",
       "1               145414   89683  235097    38.15\n",
       "2               200001  123113  323114    38.10"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.countplot(data=train_full, x='Gender', hue='PotentialFraud')\n",
    "plt.title('Gender Distribution by Fraud Status')\n",
    "plt.xlabel('Gender')\n",
    "plt.ylabel('Number of Claims')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "gender_counts = train_full.groupby(['Gender', 'PotentialFraud']).size().unstack(fill_value=0)\n",
    "gender_counts['Total'] = gender_counts.sum(axis=1)\n",
    "gender_counts['% Fraud'] = (gender_counts['Yes'] / gender_counts['Total'] * 100).round(2)\n",
    "gender_counts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "YeJ4v_LTEQmn",
   "metadata": {
    "id": "YeJ4v_LTEQmn"
   },
   "source": [
    "Race vs. Fraud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "rDwkZkaREQeE",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 690
    },
    "id": "rDwkZkaREQeE",
    "outputId": "a4da756a-1d6d-4ba9-f326-c2c2b399bbb0"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"race_counts\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Race\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Hispanic\",\n          \"White\",\n          \"Black\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 138141,\n        \"min\": 6615,\n        \"max\": 292691,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          6615,\n          292691,\n          35356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 83676,\n        \"min\": 5205,\n        \"max\": 178345,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5205,\n          178345,\n          20284\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 221810,\n        \"min\": 11820,\n        \"max\": 471036,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          11820,\n          471036,\n          55640\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"% Fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.457065551832655,\n        \"min\": 36.46,\n        \"max\": 45.46,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          44.04,\n          37.86,\n          36.46\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe",
       "variable_name": "race_counts"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-66e2c771-de34-492f-a238-094b00e3eacb\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>PotentialFraud</th>\n",
       "      <th>No</th>\n",
       "      <th>Yes</th>\n",
       "      <th>Total</th>\n",
       "      <th>% Fraud</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Race</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Black</th>\n",
       "      <td>35356</td>\n",
       "      <td>20284</td>\n",
       "      <td>55640</td>\n",
       "      <td>36.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic</th>\n",
       "      <td>6615</td>\n",
       "      <td>5205</td>\n",
       "      <td>11820</td>\n",
       "      <td>44.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other</th>\n",
       "      <td>10753</td>\n",
       "      <td>8962</td>\n",
       "      <td>19715</td>\n",
       "      <td>45.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White</th>\n",
       "      <td>292691</td>\n",
       "      <td>178345</td>\n",
       "      <td>471036</td>\n",
       "      <td>37.86</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66e2c771-de34-492f-a238-094b00e3eacb')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-66e2c771-de34-492f-a238-094b00e3eacb button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-66e2c771-de34-492f-a238-094b00e3eacb');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-86f60564-160a-472d-9514-0c804ae41495\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-86f60564-160a-472d-9514-0c804ae41495')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-86f60564-160a-472d-9514-0c804ae41495 button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "  <div id=\"id_89d65b4e-0915-43d0-8314-167dbda1b94a\">\n",
       "    <style>\n",
       "      .colab-df-generate {\n",
       "        background-color: #E8F0FE;\n",
       "        border: none;\n",
       "        border-radius: 50%;\n",
       "        cursor: pointer;\n",
       "        display: none;\n",
       "        fill: #1967D2;\n",
       "        height: 32px;\n",
       "        padding: 0 0 0 0;\n",
       "        width: 32px;\n",
       "      }\n",
       "\n",
       "      .colab-df-generate:hover {\n",
       "        background-color: #E2EBFA;\n",
       "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "        fill: #174EA6;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate {\n",
       "        background-color: #3B4455;\n",
       "        fill: #D2E3FC;\n",
       "      }\n",
       "\n",
       "      [theme=dark] .colab-df-generate:hover {\n",
       "        background-color: #434B5C;\n",
       "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "        fill: #FFFFFF;\n",
       "      }\n",
       "    </style>\n",
       "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('race_counts')\"\n",
       "            title=\"Generate code using this dataframe.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "    <script>\n",
       "      (() => {\n",
       "      const buttonEl =\n",
       "        document.querySelector('#id_89d65b4e-0915-43d0-8314-167dbda1b94a button.colab-df-generate');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      buttonEl.onclick = () => {\n",
       "        google.colab.notebook.generateWithVariable('race_counts');\n",
       "      }\n",
       "      })();\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "PotentialFraud      No     Yes   Total  % Fraud\n",
       "Race                                           \n",
       "Black            35356   20284   55640    36.46\n",
       "Hispanic          6615    5205   11820    44.04\n",
       "Other            10753    8962   19715    45.46\n",
       "White           292691  178345  471036    37.86"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Clean start\n",
    "train_full = train_full.drop(columns=['Race'], errors='ignore')\n",
    "\n",
    "# Ensure BeneID is string (to avoid join issues)\n",
    "train_full['BeneID'] = train_full['BeneID'].astype(str)\n",
    "train_beneficiary['BeneID'] = train_beneficiary['BeneID'].astype(str)\n",
    "\n",
    "# Merge Race back in\n",
    "train_full = train_full.merge(train_beneficiary[['BeneID', 'Race']], on='BeneID', how='left')\n",
    "\n",
    "# Map Race codes to readable labels\n",
    "race_mapping = {\n",
    "    1: 'White',\n",
    "    2: 'Black',\n",
    "    3: 'Other',\n",
    "    5: 'Hispanic',\n",
    "    0: 'Unknown'\n",
    "}\n",
    "train_full['Race'] = train_full['Race'].map(race_mapping)\n",
    "\n",
    "plt.figure(figsize=(8, 5))\n",
    "sns.countplot(data=train_full, x='Race', hue='PotentialFraud')\n",
    "plt.title('Race Distribution by Fraud Status')\n",
    "plt.xlabel('Race')\n",
    "plt.ylabel('Number of Claims')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "race_counts = train_full.groupby(['Race', 'PotentialFraud']).size().unstack(fill_value=0)\n",
    "race_counts['Total'] = race_counts.sum(axis=1)\n",
    "race_counts['% Fraud'] = (race_counts['Yes'] / race_counts['Total'] * 100).round(2)\n",
    "race_counts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "i8JtlRewJIpS",
   "metadata": {
    "id": "i8JtlRewJIpS"
   },
   "source": [
    "Geography vs. Fraud."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "jD7W0Z82JhHK",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 394
    },
    "id": "jD7W0Z82JhHK",
    "outputId": "fa329c39-c234-4469-af9a-c9b558869de9"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "summary": "{\n  \"name\": \"state_fraud_counts\",\n  \"rows\": 52,\n  \"fields\": [\n    {\n      \"column\": \"StateName\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 47,\n        \"samples\": [\n          \"Connecticut\",\n          \"Florida\",\n          \"Minnesota\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5817,\n        \"min\": 441,\n        \"max\": 23887,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          15908,\n          3868,\n          4748\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5520,\n        \"min\": 82,\n        \"max\": 30335,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          8509,\n          1016,\n          770\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10761,\n        \"min\": 619,\n        \"max\": 51350,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          24417,\n          4884,\n          5518\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"% Fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.230174845419917,\n        \"min\": 8.72,\n        \"max\": 62.82,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          16.27,\n          20.8,\n          13.95\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
       "type": "dataframe",
       "variable_name": "state_fraud_counts"
      },
      "text/html": [
       "\n",
       "  <div id=\"df-88a85934-a256-4af4-81d3-9128800d0dc2\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>PotentialFraud</th>\n",
       "      <th>No</th>\n",
       "      <th>Yes</th>\n",
       "      <th>Total</th>\n",
       "      <th>% Fraud</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StateName</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>South Dakota</th>\n",
       "      <td>1257</td>\n",
       "      <td>2124</td>\n",
       "      <td>3381</td>\n",
       "      <td>62.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arkansas</th>\n",
       "      <td>21015</td>\n",
       "      <td>30335</td>\n",
       "      <td>51350</td>\n",
       "      <td>59.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Utah</th>\n",
       "      <td>6384</td>\n",
       "      <td>8613</td>\n",
       "      <td>14997</td>\n",
       "      <td>57.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Louisiana</th>\n",
       "      <td>5826</td>\n",
       "      <td>7798</td>\n",
       "      <td>13624</td>\n",
       "      <td>57.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nebraska</th>\n",
       "      <td>6828</td>\n",
       "      <td>9112</td>\n",
       "      <td>15940</td>\n",
       "      <td>57.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>California</th>\n",
       "      <td>3534</td>\n",
       "      <td>3666</td>\n",
       "      <td>7200</td>\n",
       "      <td>50.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nevada</th>\n",
       "      <td>1717</td>\n",
       "      <td>1739</td>\n",
       "      <td>3456</td>\n",
       "      <td>50.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Hampshire</th>\n",
       "      <td>17532</td>\n",
       "      <td>17492</td>\n",
       "      <td>35024</td>\n",
       "      <td>49.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ohio</th>\n",
       "      <td>12803</td>\n",
       "      <td>11448</td>\n",
       "      <td>24251</td>\n",
       "      <td>47.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rhode Island</th>\n",
       "      <td>7709</td>\n",
       "      <td>6709</td>\n",
       "      <td>14418</td>\n",
       "      <td>46.53</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88a85934-a256-4af4-81d3-9128800d0dc2')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-88a85934-a256-4af4-81d3-9128800d0dc2 button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-88a85934-a256-4af4-81d3-9128800d0dc2');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "    <div id=\"df-df188c8f-8339-44ec-9c4f-a809173a3b4f\">\n",
       "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-df188c8f-8339-44ec-9c4f-a809173a3b4f')\"\n",
       "                title=\"Suggest charts\"\n",
       "                style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "      </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "      <script>\n",
       "        async function quickchart(key) {\n",
       "          const quickchartButtonEl =\n",
       "            document.querySelector('#' + key + ' button');\n",
       "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "          try {\n",
       "            const charts = await google.colab.kernel.invokeFunction(\n",
       "                'suggestCharts', [key], {});\n",
       "          } catch (error) {\n",
       "            console.error('Error during call to suggestCharts:', error);\n",
       "          }\n",
       "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "        }\n",
       "        (() => {\n",
       "          let quickchartButtonEl =\n",
       "            document.querySelector('#df-df188c8f-8339-44ec-9c4f-a809173a3b4f button');\n",
       "          quickchartButtonEl.style.display =\n",
       "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "        })();\n",
       "      </script>\n",
       "    </div>\n",
       "\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "PotentialFraud     No    Yes  Total  % Fraud\n",
       "StateName                                   \n",
       "South Dakota     1257   2124   3381    62.82\n",
       "Arkansas        21015  30335  51350    59.07\n",
       "Utah             6384   8613  14997    57.43\n",
       "Louisiana        5826   7798  13624    57.24\n",
       "Nebraska         6828   9112  15940    57.16\n",
       "California       3534   3666   7200    50.92\n",
       "Nevada           1717   1739   3456    50.32\n",
       "New Hampshire   17532  17492  35024    49.94\n",
       "Ohio            12803  11448  24251    47.21\n",
       "Rhode Island     7709   6709  14418    46.53"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# FIPS to state name mapping\n",
    "fips_to_state = {\n",
    "    1: 'Alabama', 2: 'Alaska', 4: 'Arizona', 5: 'Arkansas', 6: 'California',\n",
    "    8: 'Colorado', 9: 'Connecticut', 10: 'Delaware', 11: 'DC', 12: 'Florida',\n",
    "    13: 'Georgia', 15: 'Hawaii', 16: 'Idaho', 17: 'Illinois', 18: 'Indiana',\n",
    "    19: 'Iowa', 20: 'Kansas', 21: 'Kentucky', 22: 'Louisiana', 23: 'Maine',\n",
    "    24: 'Maryland', 25: 'Massachusetts', 26: 'Michigan', 27: 'Minnesota',\n",
    "    28: 'Mississippi', 29: 'Missouri', 30: 'Montana', 31: 'Nebraska',\n",
    "    32: 'Nevada', 33: 'New Hampshire', 34: 'New Jersey', 35: 'New Mexico',\n",
    "    36: 'New York', 37: 'North Carolina', 38: 'North Dakota', 39: 'Ohio',\n",
    "    40: 'Oklahoma', 41: 'Oregon', 42: 'Pennsylvania', 44: 'Rhode Island',\n",
    "    45: 'South Carolina', 46: 'South Dakota', 47: 'Tennessee', 48: 'Texas',\n",
    "    49: 'Utah', 50: 'Vermont', 51: 'Virginia', 53: 'Washington', 54: 'West Virginia',\n",
    "    55: 'Wisconsin', 56: 'Wyoming'\n",
    "}\n",
    "\n",
    "# Group by State and Fraud\n",
    "state_fraud_counts = train_full.groupby(['State', 'PotentialFraud']).size().unstack(fill_value=0)\n",
    "\n",
    "# Compute totals and fraud %\n",
    "state_fraud_counts['Total'] = state_fraud_counts['Yes'] + state_fraud_counts['No']\n",
    "state_fraud_counts['% Fraud'] = (state_fraud_counts['Yes'] / state_fraud_counts['Total'] * 100).round(2)\n",
    "\n",
    "# Replace FIPS with names\n",
    "state_fraud_counts['StateName'] = state_fraud_counts.index.map(fips_to_state)\n",
    "\n",
    "# Move StateName to index\n",
    "state_fraud_counts = state_fraud_counts.set_index('StateName')\n",
    "\n",
    "# Sort and show top 10\n",
    "state_fraud_counts = state_fraud_counts.sort_values('% Fraud', ascending=False)\n",
    "state_fraud_counts.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "E_kI9cuqJQwD",
   "metadata": {
    "id": "E_kI9cuqJQwD"
   },
   "source": [
    "Bar Plot of Fraud Rate by State (Top 15 States)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "zrNB8f78JRWj",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 690
    },
    "id": "zrNB8f78JRWj",
    "outputId": "5386ada9-8d25-4423-801d-a96b0804cb2c"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipython-input-32-3926899593.py:12: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.barplot(data=top_15, x='StateName', y='% Fraud', palette='flare')\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Reset index so StateName becomes a column for plotting\n",
    "plot_df = state_fraud_counts.reset_index()\n",
    "\n",
    "# Sort top 15 by % Fraud\n",
    "top_15 = plot_df.sort_values('% Fraud', ascending=False).head(15)\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.barplot(data=top_15, x='StateName', y='% Fraud', palette='flare')\n",
    "plt.title('Top 15 States by % of Fraudulent Providers')\n",
    "plt.xlabel('State')\n",
    "plt.ylabel('% Fraud')\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1gVCK9HPAsX4",
   "metadata": {
    "id": "1gVCK9HPAsX4"
   },
   "source": [
    "Duplicate Claims"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "KP7ritmeKZ9H",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "KP7ritmeKZ9H",
    "outputId": "b0d07ee0-aaeb-47ea-f1a2-6fa3c13a9947"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total duplicate ClaimIDs: 0\n"
     ]
    }
   ],
   "source": [
    "duplicate_claims = train_full.duplicated(subset=['ClaimID'])\n",
    "print(f\"Total duplicate ClaimIDs: {duplicate_claims.sum()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sBlEbqiLKcgm",
   "metadata": {
    "id": "sBlEbqiLKcgm"
   },
   "source": [
    "Duplicate Claims by Key Fields\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "WmfsEGFeKdlA",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "WmfsEGFeKdlA",
    "outputId": "69035ace-522a-4768-951a-7d483ec33c5a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Suspicious duplicate claims: 81\n"
     ]
    }
   ],
   "source": [
    "claim_duplicates = train_full.duplicated(\n",
    "    subset=['BeneID', 'Provider', 'ClaimStartDt', 'ClaimEndDt', 'InscClaimAmtReimbursed']\n",
    ")\n",
    "print(f\"Suspicious duplicate claims: {claim_duplicates.sum()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "svlPFcPrLS3S",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "svlPFcPrLS3S",
    "outputId": "2b9cf23c-a49c-4015-ce1d-195afe4bc9af"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fraud distribution among suspicious duplicate claims:\n",
      "PotentialFraud\n",
      "Yes    82\n",
      "No     80\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Percentage breakdown:\n",
      "PotentialFraud\n",
      "Yes    50.62\n",
      "No     49.38\n",
      "Name: count, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Step 1: Identify suspicious duplicate claims (same BeneID, Provider, ClaimStartDt, ClaimEndDt, InscClaimAmtReimbursed)\n",
    "dup_claims = train_full[\n",
    "    train_full.duplicated(\n",
    "        subset=['BeneID', 'Provider', 'ClaimStartDt', 'ClaimEndDt', 'InscClaimAmtReimbursed'],\n",
    "        keep=False\n",
    "    )\n",
    "]\n",
    "\n",
    "# Step 2: Check fraud distribution among those duplicates\n",
    "fraud_counts = dup_claims['PotentialFraud'].value_counts()\n",
    "print(\"Fraud distribution among suspicious duplicate claims:\")\n",
    "print(fraud_counts)\n",
    "\n",
    "# Optional: Percent breakdown\n",
    "fraud_pct = (fraud_counts / len(dup_claims) * 100).round(2)\n",
    "print(\"\\nPercentage breakdown:\")\n",
    "print(fraud_pct)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fG_y3CpwKgzg",
   "metadata": {
    "id": "fG_y3CpwKgzg"
   },
   "source": [
    "Providers submitting multiple claims with same diagnosis & procedure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "OjaOzElkKgkc",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "OjaOzElkKgkc",
    "outputId": "ea3449a3-a22f-4c73-a801-aba015dd3421"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Providers with same diagnosis & procedure codes: 109386\n"
     ]
    }
   ],
   "source": [
    "duplicate_diag_proc = train_full.duplicated(\n",
    "    subset=['Provider', 'ClmDiagnosisCode_1', 'ClmProcedureCode_1']\n",
    ")\n",
    "print(f\"Providers with same diagnosis & procedure codes: {duplicate_diag_proc.sum()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "nNDreeWYKlaD",
   "metadata": {
    "id": "nNDreeWYKlaD"
   },
   "source": [
    "Patients treated by many different providers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ansXpof-KlQd",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ansXpof-KlQd",
    "outputId": "0dbef608-fcb4-40c6-a0c8-6802b7298418"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max providers a patient has seen: 20\n"
     ]
    }
   ],
   "source": [
    "patients_per_provider = train_full.groupby('BeneID')['Provider'].nunique()\n",
    "print(f\"Max providers a patient has seen: {patients_per_provider.max()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "wD69hWsKKqt8",
   "metadata": {
    "id": "wD69hWsKKqt8"
   },
   "source": [
    " Claims with overlapping dates for the same patient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "zMNXp5GxKrI_",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zMNXp5GxKrI_",
    "outputId": "19a0e56f-2a44-46fd-b4f1-208f4276c6f4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overlapping claims for same patient: 19726\n"
     ]
    }
   ],
   "source": [
    "overlap_df = train_full[['BeneID', 'ClaimStartDt', 'ClaimEndDt']].copy()\n",
    "overlap_df['ClaimStartDt'] = pd.to_datetime(overlap_df['ClaimStartDt'])\n",
    "overlap_df['ClaimEndDt'] = pd.to_datetime(overlap_df['ClaimEndDt'])\n",
    "\n",
    "# Sort and shift to detect overlap\n",
    "overlap_df = overlap_df.sort_values(by=['BeneID', 'ClaimStartDt'])\n",
    "overlap_df['PrevEndDt'] = overlap_df.groupby('BeneID')['ClaimEndDt'].shift(1)\n",
    "overlap_df['Overlap'] = overlap_df['ClaimStartDt'] <= overlap_df['PrevEndDt']\n",
    "overlap_count = overlap_df['Overlap'].sum()\n",
    "\n",
    "print(f\"Overlapping claims for same patient: {overlap_count}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "rc6FVs_VcpqA",
   "metadata": {
    "id": "rc6FVs_VcpqA"
   },
   "source": [
    "Step 1: Finalize the Modeling Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "N-_L09kUsdVF",
   "metadata": {
    "id": "N-_L09kUsdVF"
   },
   "outputs": [],
   "source": [
    "# Non-predictive columns to drop\n",
    "non_predictive = [\n",
    "    'BeneID', 'ClaimID', 'Provider', 'AttendingPhysician',\n",
    "    'OperatingPhysician', 'OtherPhysician', 'AdmissionDt', 'DischargeDt',\n",
    "    'ClaimStartDt', 'ClaimEndDt', 'DOB', 'DOD', 'PotentialFraud'\n",
    "]\n",
    "# Recreate the binary fraud target column\n",
    "train_full['FraudLabel'] = train_full['PotentialFraud'].map({'Yes': 1, 'No': 0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "eqBmSd82g2VE",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "eqBmSd82g2VE",
    "outputId": "57d0e4c3-9c10-472d-ba2b-4979be81f687"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final modeling dataset is ready:\n",
      "Features shape: (553898, 26)\n",
      "Target shape: (553898,)\n",
      "Class balance:\n",
      "FraudLabel\n",
      "No     0.6191\n",
      "Yes    0.3809\n",
      "Name: proportion, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Drop procedure code columns\n",
    "cols_to_drop = [\n",
    "    'ClmProcedureCode_1', 'ClmProcedureCode_2', 'ClmProcedureCode_3',\n",
    "    'ClmProcedureCode_4', 'ClmProcedureCode_5', 'ClmProcedureCode_6'\n",
    "]\n",
    "\n",
    "train_model = train_full.drop(columns=non_predictive + cols_to_drop, errors='ignore')\n",
    "\n",
    "# Remove remaining object columns (except FraudLabel)\n",
    "train_model = train_model.drop(columns=[col for col in train_model.columns if train_model[col].dtype == 'object' and col != 'FraudLabel'])\n",
    "\n",
    "# Drop remaining rows with any NaNs\n",
    "train_model = train_model.dropna()\n",
    "\n",
    "# Verify result\n",
    "print(\"Final modeling dataset is ready:\")\n",
    "print(\"Features shape:\", train_model.drop(columns=['FraudLabel']).shape)\n",
    "print(\"Target shape:\", train_model['FraudLabel'].shape)\n",
    "print(\"Class balance:\")\n",
    "print(train_model['FraudLabel'].value_counts(normalize=True).rename({0: 'No', 1: 'Yes'}).round(4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "avpSyRmVdMnc",
   "metadata": {
    "id": "avpSyRmVdMnc"
   },
   "source": [
    "Step 2: Train-Test Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "W-sawQUpiDyv",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "W-sawQUpiDyv",
    "outputId": "77f1c5c3-d74c-4dca-cebf-c884c4224427"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set shape: (443118, 26)\n",
      "Validation set shape: (110780, 26)\n",
      "\n",
      "Training class balance:\n",
      "FraudLabel\n",
      "No     0.6191\n",
      "Yes    0.3809\n",
      "Name: proportion, dtype: float64\n",
      "\n",
      "Validation class balance:\n",
      "FraudLabel\n",
      "No     0.6191\n",
      "Yes    0.3809\n",
      "Name: proportion, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split data\n",
    "X = train_model.drop(columns=['FraudLabel'])\n",
    "y = train_model['FraudLabel']\n",
    "\n",
    "X_train, X_val, y_train, y_val = train_test_split(\n",
    "    X, y, test_size=0.2, stratify=y, random_state=42\n",
    ")\n",
    "\n",
    "# Check balance\n",
    "print(\"Training set shape:\", X_train.shape)\n",
    "print(\"Validation set shape:\", X_val.shape)\n",
    "print(\"\\nTraining class balance:\")\n",
    "print(y_train.value_counts(normalize=True).rename({0: 'No', 1: 'Yes'}).round(4))\n",
    "print(\"\\nValidation class balance:\")\n",
    "print(y_val.value_counts(normalize=True).rename({0: 'No', 1: 'Yes'}).round(4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "zCNAgWImdVcI",
   "metadata": {
    "id": "zCNAgWImdVcI"
   },
   "source": [
    "Step 3: Baseline Model — Logistic Regression\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "78VUsG4jiWSM",
   "metadata": {
    "id": "78VUsG4jiWSM"
   },
   "outputs": [],
   "source": [
    "# Map age groups to numeric values (midpoint of the range)\n",
    "agegroup_map = {\n",
    "    '0–20': 10,\n",
    "    '21–30': 25,\n",
    "    '31–40': 35,\n",
    "    '41–50': 45,\n",
    "    '51–60': 55,\n",
    "    '61–70': 65,\n",
    "    '71–80': 75,\n",
    "    '81+': 85\n",
    "}\n",
    "\n",
    "# Apply mapping\n",
    "X_train['AgeGroup'] = X_train['AgeGroup'].map(agegroup_map)\n",
    "X_val['AgeGroup'] = X_val['AgeGroup'].map(agegroup_map)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "4CwqZFzJiMI6",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4CwqZFzJiMI6",
    "outputId": "eaabe7fb-93ba-44fe-d8ae-8efed4fd1ed6"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. OF ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "    No Fraud       0.63      0.95      0.76     68580\n",
      "       Fraud       0.57      0.11      0.18     42200\n",
      "\n",
      "    accuracy                           0.63    110780\n",
      "   macro avg       0.60      0.53      0.47    110780\n",
      "weighted avg       0.61      0.63      0.54    110780\n",
      "\n",
      "\n",
      " Confusion Matrix:\n",
      "[[65175  3405]\n",
      " [37687  4513]]\n",
      "\n",
      " AUC-ROC Score: 0.5539\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score\n",
    "\n",
    "# Initialize and train model\n",
    "logreg = LogisticRegression(max_iter=1000, random_state=42)\n",
    "logreg.fit(X_train, y_train)\n",
    "\n",
    "# Predict\n",
    "y_pred = logreg.predict(X_val)\n",
    "y_proba = logreg.predict_proba(X_val)[:, 1]\n",
    "\n",
    "# Evaluation\n",
    "print(\"Classification Report:\")\n",
    "print(classification_report(y_val, y_pred, target_names=[\"No Fraud\", \"Fraud\"]))\n",
    "\n",
    "print(\"\\n Confusion Matrix:\")\n",
    "print(confusion_matrix(y_val, y_pred))\n",
    "\n",
    "auc = roc_auc_score(y_val, y_proba)\n",
    "print(f\"\\n AUC-ROC Score: {auc:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "AJJPN-fKhkEo",
   "metadata": {
    "id": "AJJPN-fKhkEo"
   },
   "source": [
    "Step 4. Improved Model (XGBoost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "UsOND1g7jFNx",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "UsOND1g7jFNx",
    "outputId": "57dece0f-33c7-4ee8-cb2f-a6a707528961"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [02:54:33] WARNING: /workspace/src/learner.cc:740: \n",
      "Parameters: { \"use_label_encoder\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report (XGBoost):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.87      0.81     68580\n",
      "           1       0.72      0.56      0.63     42200\n",
      "\n",
      "    accuracy                           0.75    110780\n",
      "   macro avg       0.74      0.71      0.72    110780\n",
      "weighted avg       0.75      0.75      0.74    110780\n",
      "\n",
      "\n",
      "Confusion Matrix:\n",
      "[[59597  8983]\n",
      " [18568 23632]]\n",
      "\n",
      "AUC-ROC Score: 0.8024\n"
     ]
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score\n",
    "import pandas as pd\n",
    "\n",
    "# Step 1: One-hot encode categorical variable(s) (e.g., AgeGroup)\n",
    "X_train_encoded = pd.get_dummies(X_train, drop_first=True)\n",
    "X_val_encoded = pd.get_dummies(X_val, drop_first=True)\n",
    "\n",
    "# Align columns in case some dummy columns are missing in one set\n",
    "X_val_encoded = X_val_encoded.reindex(columns=X_train_encoded.columns, fill_value=0)\n",
    "\n",
    "# Step 2: Initialize and train the XGBoost model\n",
    "xgb = XGBClassifier(\n",
    "    n_estimators=200,\n",
    "    max_depth=6,\n",
    "    learning_rate=0.1,\n",
    "    subsample=0.8,\n",
    "    colsample_bytree=0.8,\n",
    "    use_label_encoder=False,\n",
    "    eval_metric='logloss',\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "xgb.fit(X_train_encoded, y_train)\n",
    "\n",
    "# Step 3: Predict\n",
    "y_pred_xgb = xgb.predict(X_val_encoded)\n",
    "y_proba_xgb = xgb.predict_proba(X_val_encoded)[:, 1]\n",
    "\n",
    "# Step 4: Evaluation\n",
    "print(\"Classification Report (XGBoost):\")\n",
    "print(classification_report(y_val, y_pred_xgb))\n",
    "\n",
    "print(\"\\nConfusion Matrix:\")\n",
    "print(confusion_matrix(y_val, y_pred_xgb))\n",
    "\n",
    "auc_xgb = roc_auc_score(y_val, y_proba_xgb)\n",
    "print(f\"\\nAUC-ROC Score: {auc_xgb:.4f}\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "F69glOVlhj3Q",
   "metadata": {
    "id": "F69glOVlhj3Q"
   },
   "source": [
    "Step 5. Cross-Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "2O6HpK8Ajw_w",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2O6HpK8Ajw_w",
    "outputId": "670ac258-4967-4d09-bb8f-37631501d5fa"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [02:58:52] WARNING: /workspace/src/learner.cc:740: \n",
      "Parameters: { \"use_label_encoder\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [02:59:00] WARNING: /workspace/src/learner.cc:740: \n",
      "Parameters: { \"use_label_encoder\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [02:59:09] WARNING: /workspace/src/learner.cc:740: \n",
      "Parameters: { \"use_label_encoder\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [02:59:14] WARNING: /workspace/src/learner.cc:740: \n",
      "Parameters: { \"use_label_encoder\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [02:59:23] WARNING: /workspace/src/learner.cc:740: \n",
      "Parameters: { \"use_label_encoder\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-Validation Results (5-fold):\n",
      "Accuracy:  0.7659\n",
      "Precision: 0.7371\n",
      "Recall:    0.5991\n",
      "F1 Score:  0.6609\n",
      "AUC-ROC:   0.8222\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n",
    "# Step 0: Ensure categorical columns are converted to numeric via one-hot encoding\n",
    "X_encoded = pd.get_dummies(X, drop_first=True)\n",
    "\n",
    "# Reset your arrays\n",
    "accuracies = []\n",
    "precisions = []\n",
    "recalls = []\n",
    "f1s = []\n",
    "aucs = []\n",
    "\n",
    "# Cross-validation setup\n",
    "kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Cross-validation loop\n",
    "for train_idx, val_idx in kf.split(X_encoded, y):\n",
    "    X_fold_train, X_fold_val = X_encoded.iloc[train_idx], X_encoded.iloc[val_idx]\n",
    "    y_fold_train, y_fold_val = y.iloc[train_idx], y.iloc[val_idx]\n",
    "\n",
    "    # Model\n",
    "    model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='logloss')\n",
    "    model.fit(X_fold_train, y_fold_train)\n",
    "\n",
    "    # Predict\n",
    "    preds = model.predict(X_fold_val)\n",
    "    probs = model.predict_proba(X_fold_val)[:, 1]\n",
    "\n",
    "    # Metrics\n",
    "    accuracies.append(accuracy_score(y_fold_val, preds))\n",
    "    precisions.append(precision_score(y_fold_val, preds))\n",
    "    recalls.append(recall_score(y_fold_val, preds))\n",
    "    f1s.append(f1_score(y_fold_val, preds))\n",
    "    aucs.append(roc_auc_score(y_fold_val, probs))\n",
    "\n",
    "# Summary\n",
    "print(\"Cross-Validation Results (5-fold):\")\n",
    "print(f\"Accuracy:  {np.mean(accuracies):.4f}\")\n",
    "print(f\"Precision: {np.mean(precisions):.4f}\")\n",
    "print(f\"Recall:    {np.mean(recalls):.4f}\")\n",
    "print(f\"F1 Score:  {np.mean(f1s):.4f}\")\n",
    "print(f\"AUC-ROC:   {np.mean(aucs):.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "vYY9VSY_hjzc",
   "metadata": {
    "id": "vYY9VSY_hjzc"
   },
   "source": [
    "Step 6. SHAP / Feature Explanation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "d8my-qsIkTXg",
   "metadata": {
    "id": "d8my-qsIkTXg"
   },
   "outputs": [],
   "source": [
    "# If AgeGroup is like: ['61–70', '71–80', etc.]\n",
    "age_mapping = {\n",
    "    '0–20': 0,\n",
    "    '21–30': 1,\n",
    "    '31–40': 2,\n",
    "    '41–50': 3,\n",
    "    '51–60': 4,\n",
    "    '61–70': 5,\n",
    "    '71–80': 6,\n",
    "    '81+': 7\n",
    "}\n",
    "\n",
    "X_train['AgeGroup'] = X_train['AgeGroup'].map(age_mapping)\n",
    "X_val['AgeGroup'] = X_val['AgeGroup'].map(age_mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "AzFWXiT2lNM0",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 325
    },
    "id": "AzFWXiT2lNM0",
    "outputId": "5715b64c-732c-4b8c-ba7a-738a4d5dd7ba"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [02:59:42] WARNING: /workspace/src/learner.cc:740: \n",
      "Parameters: { \"use_label_encoder\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n",
       "              feature_types=None, gamma=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=None,\n",
       "              n_jobs=None, num_parallel_tree=None, random_state=42, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBClassifier</div></div><div><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n",
       "              feature_types=None, gamma=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=None,\n",
       "              n_jobs=None, num_parallel_tree=None, random_state=42, ...)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric='logloss',\n",
       "              feature_types=None, gamma=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, multi_strategy=None, n_estimators=None,\n",
       "              n_jobs=None, num_parallel_tree=None, random_state=42, ...)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "\n",
    "xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
    "xgb_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "9Z3XklxXlaAE",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "9Z3XklxXlaAE",
    "outputId": "75106bfb-b04d-4a8f-9ffd-bac09ad47565"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x650 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x650 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import shap\n",
    "\n",
    "# Initialize SHAP explainer using trained model\n",
    "explainer = shap.Explainer(xgb_model)\n",
    "shap_values = explainer(X_val)\n",
    "\n",
    "# Plot top features\n",
    "shap.plots.bar(shap_values, max_display=10)\n",
    "\n",
    "# Optional: Waterfall plot for a single sample\n",
    "shap.plots.waterfall(shap_values[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "liy1N6UThjv_",
   "metadata": {
    "id": "liy1N6UThjv_"
   },
   "source": [
    "Step 7. Text Embedding for Diagnosis Codes (NLP feature)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "S7AiIXUFmMBZ",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "S7AiIXUFmMBZ",
    "outputId": "256426f8-9be5-4e23-9f3b-da98d21d11f9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "New shape with diagnosis embeddings: (558211, 81)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.decomposition import TruncatedSVD\n",
    "import pandas as pd\n",
    "\n",
    "# Step 1: Prepare diagnosis code columns\n",
    "diag_cols = [col for col in train_full.columns if col.startswith(\"ClmDiagnosisCode_\")]\n",
    "\n",
    "# Step 2: Combine diagnosis codes into a single \"document\" per row\n",
    "train_full[\"DiagDoc\"] = train_full[diag_cols].astype(str).apply(lambda row: \" \".join(row.dropna()), axis=1)\n",
    "\n",
    "# Step 3: TF-IDF vectorization\n",
    "tfidf = TfidfVectorizer()\n",
    "diag_tfidf = tfidf.fit_transform(train_full[\"DiagDoc\"])\n",
    "\n",
    "# Step 4: Reduce dimensionality (e.g., 10 topics/components)\n",
    "svd = TruncatedSVD(n_components=10, random_state=42)\n",
    "diag_svd = svd.fit_transform(diag_tfidf)\n",
    "\n",
    "# Step 5: Create a DataFrame of embeddings and join to main dataset\n",
    "diag_features = pd.DataFrame(diag_svd, columns=[f\"DiagTopic_{i}\" for i in range(1, 11)])\n",
    "diag_features.index = train_full.index  # align index\n",
    "train_full = pd.concat([train_full, diag_features], axis=1)\n",
    "\n",
    "# Step 6: Drop raw DiagDoc and (optionally) original code columns\n",
    "train_full.drop(columns=[\"DiagDoc\"], inplace=True)\n",
    "# Optional: also drop diag_cols if not needed further\n",
    "\n",
    "# Confirm shape\n",
    "print(\"New shape with diagnosis embeddings:\", train_full.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "SwkI4z8-hjmu",
   "metadata": {
    "id": "SwkI4z8-hjmu"
   },
   "source": [
    "Step 8. Retrain Model with Embedded Diagnosis Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "dERjZPnBmux3",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "dERjZPnBmux3",
    "outputId": "4bcea58b-3132-4725-dd26-bc9b10e0967a"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [03:03:58] WARNING: /workspace/src/learner.cc:740: \n",
      "Parameters: { \"use_label_encoder\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report (XGB + Diagnosis Embeddings):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.59      0.44      0.50      3336\n",
      "           1       0.66      0.77      0.71      4579\n",
      "\n",
      "    accuracy                           0.63      7915\n",
      "   macro avg       0.62      0.61      0.61      7915\n",
      "weighted avg       0.63      0.63      0.62      7915\n",
      "\n",
      "\n",
      "Confusion Matrix:\n",
      "[[1475 1861]\n",
      " [1033 3546]]\n",
      "\n",
      "AUC-ROC Score: 0.6725\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score\n",
    "\n",
    "# Rebuild feature set with new columns included\n",
    "feature_cols = [\n",
    "    'InscClaimAmtReimbursed', 'DeductibleAmtPaid', 'DiagnosisGroupCode',\n",
    "    'LengthOfStay', 'Age',\n",
    "    'ChronicCond_Alzheimer', 'ChronicCond_Heartfailure', 'ChronicCond_KidneyDisease',\n",
    "    'ChronicCond_Cancer', 'ChronicCond_ObstrPulmonary', 'ChronicCond_Depression',\n",
    "    'ChronicCond_Diabetes', 'ChronicCond_IschemicHeart', 'ChronicCond_Osteoporasis',\n",
    "    'ChronicCond_rheumatoidarthritis', 'ChronicCond_stroke',\n",
    "    'IPAnnualReimbursementAmt', 'IPAnnualDeductibleAmt',\n",
    "    'OPAnnualReimbursementAmt', 'OPAnnualDeductibleAmt',\n",
    "    'State', 'County'\n",
    "] + [f\"DiagTopic_{i}\" for i in range(1, 11)]  # Add NLP features\n",
    "\n",
    "# Ensure label is binary\n",
    "train_full['FraudLabel'] = train_full['PotentialFraud'].map({'No': 0, 'Yes': 1})\n",
    "train_model = train_full[feature_cols + ['FraudLabel']].dropna()\n",
    "X = train_model.drop(columns=['FraudLabel'])\n",
    "y = train_model['FraudLabel']\n",
    "\n",
    "# Fix object-type columns (e.g. DiagnosisGroupCode)\n",
    "for col in X.select_dtypes(include='object').columns:\n",
    "    X[col] = X[col].astype('category').cat.codes\n",
    "\n",
    "# Split\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train model\n",
    "xgb_model_nlp = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
    "xgb_model_nlp.fit(X_train, y_train)\n",
    "\n",
    "# Predict\n",
    "y_pred = xgb_model_nlp.predict(X_val)\n",
    "y_proba = xgb_model_nlp.predict_proba(X_val)[:, 1]\n",
    "\n",
    "# Evaluate\n",
    "print(\"Classification Report (XGB + Diagnosis Embeddings):\")\n",
    "print(classification_report(y_val, y_pred))\n",
    "print(\"\\nConfusion Matrix:\")\n",
    "print(confusion_matrix(y_val, y_pred))\n",
    "print(\"\\nAUC-ROC Score:\", roc_auc_score(y_val, y_proba).round(4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4o5AlJXbqOYs",
   "metadata": {
    "id": "4o5AlJXbqOYs"
   },
   "source": [
    "GPT-Based AI Agent"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "W8hJa5Kg2V6d",
   "metadata": {
    "id": "W8hJa5Kg2V6d"
   },
   "source": [
    "Training final model and calculate SHAP values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "6hrDmyTI2U4h",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "6hrDmyTI2U4h",
    "outputId": "ded3d49b-1591-4452-deb1-27b1a28eea47"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|===================| 110777/110780 [06:11<00:00]       "
     ]
    }
   ],
   "source": [
    "# Force the entire DataFrame to float64 type\n",
    "X_val_encoded = X_val_encoded.astype('float64')\n",
    "\n",
    "explainer = shap.Explainer(xgb_model, X_val_encoded)\n",
    "shap_values = explainer(X_val_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "BkzIClm-6Gue",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 460,
     "referenced_widgets": [
      "45f2195c58284132a0c844a956e8cce4",
      "4ba9a9c2559b41dcbe781a221f336364",
      "4853a4c3688546c1b150af73abe608ca",
      "f9f031cdfabf4c8bb38ef16763741acd",
      "8e325dac023a4b82ad798eefa28a5fff"
     ]
    },
    "id": "BkzIClm-6Gue",
    "outputId": "d029d6b6-73e3-44d9-a536-28068f1248c0"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "45f2195c58284132a0c844a956e8cce4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Dropdown(description='Select Claim:', index=249, layout=Layout(width='50%'), options=(('Claim CLM37795', 0), (…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f9f031cdfabf4c8bb38ef16763741acd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def explain_with_gpt(row_index, shap_values, input_data):\n",
    "    label = input_data.iloc[row_index]['FraudLabel']\n",
    "    label_text = \"Potential Fraud\" if label == 1 else \"No Fraud\"\n",
    "\n",
    "    shap_row = shap_values[row_index].values\n",
    "    feature_names = shap_values.feature_names\n",
    "    row_data = input_data.iloc[row_index]\n",
    "    contribs = sorted(zip(feature_names, shap_row), key=lambda x: abs(x[1]), reverse=True)[:10]\n",
    "\n",
    "    # Build base explanation\n",
    "    if label == 1:\n",
    "        prompt = f\"\"\"\n",
    "You are a healthcare fraud detection analyst. A model has flagged this claim as *Potentially Fraudulent*. Below are the SHAP contributions showing what features influenced the prediction:\n",
    "\n",
    "Top Feature Contributions:\n",
    "\"\"\"\n",
    "        for feat, val in contribs:\n",
    "            prompt += f\"- {feat}: {val:.4f}\\n\"\n",
    "        prompt += \"\\nPlease explain why this claim might be fraudulent, based on these features.\"\n",
    "\n",
    "    else:\n",
    "        prompt = f\"\"\"\n",
    "You are a healthcare fraud detection analyst. A model has *not* flagged this claim as fraudulent. Below are the SHAP contributions that influenced the model's decision:\n",
    "\n",
    "Top Feature Contributions:\n",
    "\"\"\"\n",
    "        for feat, val in contribs:\n",
    "            prompt += f\"- {feat}: {val:.4f}\\n\"\n",
    "        prompt += \"\\nExplain why this claim is likely legitimate or not flagged as fraudulent.\"\n",
    "\n",
    "    # Send to GPT (chat API)\n",
    "    response = openai.ChatCompletion.create(\n",
    "        model=\"gpt-4\",\n",
    "        messages=[\n",
    "            {\"role\": \"system\", \"content\": \"You are an expert in healthcare fraud analytics.\"},\n",
    "            {\"role\": \"user\", \"content\": prompt}\n",
    "        ],\n",
    "        temperature=0.5,\n",
    "        max_tokens=300\n",
    "    )\n",
    "\n",
    "    return response.choices[0].message['content'].strip()\n",
    "\n",
    "# Display widget\n",
    "display(claim_dropdown, output)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8mnTmitJ9fPH",
   "metadata": {
    "id": "8mnTmitJ9fPH"
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "BX8tUj-j9e--",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "BX8tUj-j9e--",
    "outputId": "61a44dd0-d0b6-4c54-8314-bf3c82ea99f7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fully cleaned and saved as: eda_and_modeling_clean.ipynb\n"
     ]
    }
   ],
   "source": [
    "import nbformat\n",
    "\n",
    "# Paths\n",
    "input_path = \"eda_and_modeling-1.ipynb\"      # Your current notebook name\n",
    "output_path = \"eda_and_modeling_clean.ipynb\"  # New cleaned notebook\n",
    "\n",
    "# Load notebook\n",
    "with open(input_path, \"r\", encoding=\"utf-8\") as f:\n",
    "    nb = nbformat.read(f, as_version=4)\n",
    "\n",
    "# Remove top-level 'widgets' metadata\n",
    "nb.metadata.pop(\"widgets\", None)\n",
    "\n",
    "# Remove widget metadata from each cell\n",
    "for cell in nb.cells:\n",
    "    if \"metadata\" in cell and \"widgets\" in cell[\"metadata\"]:\n",
    "        del cell[\"metadata\"][\"widgets\"]\n",
    "\n",
    "# Save cleaned version\n",
    "with open(output_path, \"w\", encoding=\"utf-8\") as f:\n",
    "    nbformat.write(nb, f)\n",
    "\n",
    "print(f\"Fully cleaned and saved as: {output_path}\")"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
